<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/backbone/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
<<<<<<< HEAD
  <updated>2015-01-31T14:16:33-08:00</updated>
=======
  <updated>2014-07-13T14:55:20-07:00</updated>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Testing Backbone Routers in Meteor With Mocha]]></title>
=======
    <title type="html"><![CDATA[Testing Backbone Routers in Meteor with Mocha]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha/"/>
    <updated>2012-08-20T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha</id>
    <content type="html"><![CDATA[<p>One of the downsides of Meteor and perhaps strongest complaint is that it doesn&rsquo;t play nicely with existing NodeJS modules. You&rsquo;re forced to use the available SmartPackages (or build one). This is a problem since the Mocha environment runs without the browser and doesn&rsquo;t have access to the libraries included by the SmartPackage.</p>

<!--more-->


<p><em>Here&rsquo;s a previous <a href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/">post</a> describing how to setup everything</em></p>

<p>Creating the project:</p>

<<<<<<< HEAD
<pre><code class="bash">meteor create mocha-router
=======
<p><code>bash
meteor create mocha-router
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
meteor add backbone
meteor add coffeescript
cd mocha-router
mkdir client
mkdir server
mkdir tests
cd tests
mkdir lib
<<<<<<< HEAD
</code></pre>

<p>When I first installed the modules, I installed them in my project root, but this caused Meteor to try to load them in the both the client/server environment which crashed the Meteor server. Luckily, Meteor will ignore anything in the tests folder so we can install the necessary modules there.</p>

<pre><code class="bash">npm install should
npm install backbone
mocha *.coffee --compilers coffee:coffee-script
</code></pre>

<p>My goal was to create a very basic Backbone router test. Normally, I&rsquo;d define the router like so:</p>

<pre><code class="coffeescript">SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: -&gt;
)
new SampleRouter
</code></pre>
=======
</code></p>

<p>When I first installed the modules, I installed them in my project root, but this caused Meteor to try to load them in the both the client/server environment which crashed the Meteor server. Luckily, Meteor will ignore anything in the tests folder so we can install the necessary modules there.</p>

<p><code>bash
npm install should
npm install backbone
mocha *.coffee --compilers coffee:coffee-script
</code></p>

<p>My goal was to create a very basic Backbone router test. Normally, I&rsquo;d define the router like so:</p>

<p>``` coffeescript
SampleRouter = @Backbone.Router.extend(
  routes:</p>

<pre><code>"": "index"
</code></pre>

<p>  index: &ndash;>
)
new SampleRouter
```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>This won&rsquo;t work when running the Mocha tests because it assumes the Meteor framework is present to load Backbone. I solved this by creating a factory for the router and injecting the Backbone module.</p>

<p>Note, I need to put this module in tests/lib so Meteor will make sure to load it first</p>

<p>lib/sample_router_factory.coffee:
<<<<<<< HEAD
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">root = </span><span class="nx">exports</span> <span class="o">?</span> <span class="k">this</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nx">SampleRouterFactory</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@Backbone) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">getRouter: </span><span class="nf">() -&gt;</span>
</span><span class='line'>    <span class="nv">SampleRouter = </span><span class="nx">@Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">routes:</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">index</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nv">index: </span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">new</span> <span class="nx">SampleRouter</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">root.SampleRouterFactory = </span><span class="nx">SampleRouterFactory</span>
</span></code></pre></td></tr></table></div></figure></p>
=======
``` coffeescript
root = exports ? this</p>

<p>class SampleRouterFactory
  constructor: (@Backbone) &ndash;></p>

<p>  getRouter: () &ndash;></p>

<pre><code>SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: -&gt;
    Session.set "test", "test"
)
new SampleRouter
</code></pre>

<p>root.SampleRouterFactory = SampleRouterFactory
```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Exports is a global object accessible in the nodeJS environment that Mocha runs in. See this <a href="http://visionmedia.github.com/masteringnode/book.html">ebook</a> for more details.</p>

<p>This module will now create a class that will return a new instance of the SampleRouter.</p>

<p>Now, let&rsquo;s look at the test case:</p>

<p>tests/sample_router_factory_test.coffee
<<<<<<< HEAD
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">should</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nv">Backbone = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">backbone</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nv">SampleRouterFactory = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;..</span><span class="o">/</span><span class="nx">client</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">sample_router_factory</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">SampleRouterFactory</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SampleRouter</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">factory = </span><span class="k">new</span> <span class="nx">SampleRouterFactory</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">router = </span><span class="nx">factory</span><span class="p">.</span><span class="nx">getRouter</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">it</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">should</span> <span class="nx">have</span> <span class="nx">an</span> <span class="nx">index</span> <span class="nx">router</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;].</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">index</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>
=======
``` coffeescript
should = require(&lsquo;should&rsquo;)
Backbone = require(&lsquo;backbone&rsquo;)
SampleRouterFactory = require(&lsquo;../client/lib/sample_router_factory&rsquo;).SampleRouterFactory</p>

<p>describe &ldquo;SampleRouter&rdquo;, &ndash;>
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
  it &ldquo;should have an index router&rdquo;, &ndash;></p>

<pre><code>router.routes[''].should.equal('index')
</code></pre>

<p>```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Lastly, in the actual Meteor app I create the app a similar way:</p>

<p>mocha-router.coffee
<code>coffeescript
Meteor.startup -&gt;
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
</code></p>

<p>Again, there&rsquo;s no need to require either Backbone (loaded as a SmartPackage) or the actual SampleRouterFactory because Meteor treats all of your CoffeeScript files as a single file and consequently scope.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">Source code here.</a></p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Handling Permalinks in Backbone.js With Routers]]></title>
=======
    <title type="html"><![CDATA[Handling permalinks in Backbone.js with Routers]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/04/30/handling-permalinks-in-backbone-js-with-routers/"/>
    <updated>2012-04-30T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/30/handling-permalinks-in-backbone-js-with-routers</id>
    <content type="html"><![CDATA[<p>This post is part of a series:</p>

<ul>
<li><a href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/">First post</a></li></li>
<li><a href="http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone/">Second post</a></li></li>
</ul>


<p>One of the missing features in my prototype was handling of permalinks. To make things easy, I originally removed all the routes and added click handlers instead. In retrospect that was a mistake. Instead of having the app logic tangled up with click handlers, it would have been much more straightforward to define routes and use links.</p>

<p>Here’s the <a href="http://young-flower-9677.herokuapp.com/">demo</a> and <a href="https://github.com/skalb/trackbone">source</a></p>

<!--more-->


<p>In this post, I’m going to explain the  Backbone router step by step. First, I need to actually define what routes I want:</p>

<p>I need:</p>

<ul>
<<<<<<< HEAD
<li>Home page -> Load list of projects</li></li>
<li>Selected project -> Load list of projects and features</li></li>
<li>Selected feature -> Load list of projects, features, and bugs</li></li>
</ul>


<pre><code class="coffeescript">routes:
  ".*"  : "showProjects"
  "projects/:project_id" : "showProjects"
  "projects/:project_id/features/:feature_id/*" : "showProjects"
</code></pre>
=======
<li>Home page &ndash;> Load list of projects</li></li>
<li>Selected project &ndash;> Load list of projects and features</li></li>
<li>Selected feature &ndash;> Load list of projects, features, and bugs</li></li>
</ul>


<p><code>coffeescript
routes:
  ".*"  : "showProjects"
  "projects/:project_id" : "showProjects"
  "projects/:project_id/features/:feature_id/*" : "showProjects"
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Notice that all my routes point to the same function. The only difference is that the project_id and feature_id variables will be undefined. JavaScript won’t complain if your function call doesn’t match the function signature. It will just set them undefined.</p>

<p>Now let’s look at showProjects.</p>

<<<<<<< HEAD
<pre><code class="coffeescript">showProjects: (project_id, feature_id, bug_id) -&gt;
  @renderViews(@projects, project_id, "Projects")

  if project_id
    @loadChildren(@projects, project_id, [feature_id, bug_id], "loadFeatures")
</code></pre>
=======
<p>``` coffeescript
showProjects: (project_id, feature_id, bug_id) &ndash;>
  @renderViews(@projects, project_id, &ldquo;Projects&rdquo;)</p>

<p>  if project_id
    @loadChildren(@projects, project_id, [feature_id, bug_id], &ldquo;loadFeatures&rdquo;)
```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>My original goal was to create a helper method that would support an abitrary length chain of loading children. That is, loadChildren will call loadFeatures which will then call loadChildren again etc. The final implementation isn’t quite that generic since it requires me to construct the individual item_ids at the start.</p>

<p>As I was finishing this prototype , I managed to remove all duplicate code by creating some helper methods.</p>

<<<<<<< HEAD
<pre><code class="coffeescript">clearType: (model) -&gt;
  $("#list-#{model}").html('')
  $("#new-#{model}").html('')

renderView: (selector, view) -&gt;
  $(selector).html(view.render().el)

renderViews: (items, item_id, type) -&gt;
  indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
  @renderView("#list-#{type.toLowerCase()}", indexView)

  newView = new Trackbone.Views.NewView(collection: items, type: type)
  @renderView("#new-#{type.toLowerCase()}", newView)
</code></pre>

<p>And now let’s look at loadChildren:</p>

<pre><code class="coffeescript">loadChildren: (items, item_id, child_ids, callback) -&gt;
=======
<p>`&ldquo; coffeescript
clearType: (model) &ndash;>
  $(&ldquo;#list-#{model}&rdquo;).html(&rdquo;)
  $(&ldquo;#new-#{model}&rdquo;).html(&lsquo;&rsquo;)</p>

<p>renderView: (selector, view) &ndash;>
  $(selector).html(view.render().el)</p>

<p>renderViews: (items, item_id, type) &ndash;>
  indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
  @renderView(&ldquo;#list-#{type.toLowerCase()}&rdquo;, indexView)</p>

<p>  newView = new Trackbone.Views.NewView(collection: items, type: type)
  @renderView(&ldquo;#new-#{type.toLowerCase()}&rdquo;, newView)
```</p>

<p>And now let’s look at loadChildren:</p>

<p><code>coffeescript
loadChildren: (items, item_id, child_ids, callback) -&gt;
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
  item = items.get(item_id)
  item.loadChildren()
  item.children.fetch(
    success: =&gt;
      @[callback](item.children, child_ids.shift(), child_ids)
  )
  item.children.fetch()
<<<<<<< HEAD
</code></pre>
=======
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Okay, why am I indexing into the object with a string instead of just passing the function in directly. Well, because the fat arrow wasn’t working as expected. Either I was doing something wrong or there&rsquo;s a bug in the coffee-rails interpreter because js2coffee gave me a different result.</p>

<p>The full router:</p>

<<<<<<< HEAD
<pre><code class="coffeescript">class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) -&gt;
    @projects = new Trackbone.Collections.ProjectsCollection()
    @projects.reset options.projects

  routes:
    ".*"  : "showProjects"
    "projects/:project_id" : "showProjects"
    "projects/:project_id/features/:feature_id/*" : "showProjects"

  clearType: (model) -&gt;
    $("#list-#{model}").html('')
    $("#new-#{model}").html('')

  loadChildren: (items, item_id, child_ids, callback) -&gt;
    item = items.get(item_id)
    item.loadChildren()
    item.children.fetch(
      success: =&gt;
        @[callback](item.children, child_ids.shift(), child_ids)
    )
    item.children.fetch()

  renderView: (selector, view) -&gt;
    $(selector).html(view.render().el)

  renderViews: (items, item_id, type) -&gt;
    indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
    @renderView("#list-#{type.toLowerCase()}", indexView)

    newView = new Trackbone.Views.NewView(collection: items, type: type)
    @renderView("#new-#{type.toLowerCase()}", newView)

  showProjects: (project_id, feature_id, bug_id) -&gt;
    @renderViews(@projects, project_id, "Projects")

    if project_id
      @loadChildren(@projects, project_id, [feature_id, bug_id], "loadFeatures")

  loadFeatures: (features, feature_id, child_ids) -&gt;
    @renderViews(features, feature_id, "Features")

    if feature_id
      @loadChildren(features, feature_id, child_ids, "loadBugs")
    else
      @clearType("bugs")

  loadBugs: (bugs, bug_id, child_ids) -&gt;
    @renderViews(bugs, bug_id, "Bugs")
</code></pre>

<p>I also needed to tweak my item view to include the correct url for the select link.</p>

<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.ItemView extends Backbone.View
  template: JST["backbone/templates/item"]

  events:
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    name = @model.get("name")
    id = @model.get("id")
    url = "#{@model.collection.url()}/#{id}"
    $(@el).html(@template(name: name, id: id, url: url))
    if (@options.selected)
      window.toggleSelected(@el)
    return this
</code></pre>
=======
<p>``` coffeescript
class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) &ndash;>
    @projects = new Trackbone.Collections.ProjectsCollection()
    @projects.reset options.projects</p>

<p>  routes:
    ".<em>&ldquo;  : "showProjects&rdquo;
    "projects/:project_id" : &ldquo;showProjects&rdquo;
    "projects/:project_id/features/:feature_id/</em>&ldquo; : "showProjects&rdquo;</p>

<p>  clearType: (model) &ndash;>
    $(&ldquo;#list-#{model}&rdquo;).html(&lsquo;&rsquo;)
    $(&ldquo;#new-#{model}&rdquo;).html(&lsquo;&rsquo;)</p>

<p>  loadChildren: (items, item_id, child_ids, callback) &ndash;>
    item = items.get(item_id)
    item.loadChildren()
    item.children.fetch(
      success: =>
        @<a href="item.children,%20child_ids.shift(">callback</a>, child_ids)
    )
    item.children.fetch()</p>

<p>  renderView: (selector, view) &ndash;>
    $(selector).html(view.render().el)</p>

<p>  renderViews: (items, item_id, type) &ndash;>
    indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
    @renderView(&ldquo;#list-#{type.toLowerCase()}&rdquo;, indexView)</p>

<p>    newView = new Trackbone.Views.NewView(collection: items, type: type)
    @renderView(&ldquo;#new-#{type.toLowerCase()}&rdquo;, newView)</p>

<p>  showProjects: (project_id, feature_id, bug_id) &ndash;>
    @renderViews(@projects, project_id, &ldquo;Projects&rdquo;)</p>

<p>    if project_id
      @loadChildren(@projects, project_id, [feature_id, bug_id], &ldquo;loadFeatures&rdquo;)</p>

<p>  loadFeatures: (features, feature_id, child_ids) &ndash;>
    @renderViews(features, feature_id, &ldquo;Features&rdquo;)</p>

<p>    if feature_id
      @loadChildren(features, feature_id, child_ids, &ldquo;loadBugs&rdquo;)
    else
      @clearType(&ldquo;bugs&rdquo;)</p>

<p>  loadBugs: (bugs, bug_id, child_ids) &ndash;>
    @renderViews(bugs, bug_id, &ldquo;Bugs&rdquo;)
```</p>

<p>I also needed to tweak my item view to include the correct url for the select link.</p>

<p>``` coffeescript
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.ItemView extends Backbone.View
  template: JST[&ldquo;backbone/templates/item&rdquo;]</p>

<p>  events:
    "click .destroy" : &ldquo;destroy&rdquo;</p>

<p>  tagName: &ldquo;tr&rdquo;
  className: &ldquo;item&rdquo;</p>

<p>  destroy: () &ndash;>
    @model.destroy()
    this.remove()</p>

<p>    return false</p>

<p>  render: &ndash;>
    name = @model.get(&ldquo;name&rdquo;)
    id = @model.get(&ldquo;id&rdquo;)
    url = &ldquo;#{@model.collection.url()}/#{id}&rdquo;
    $(@el).html(@template(name: name, id: id, url: url))
    if (@options.selected)
      window.toggleSelected(@el)
    return this</p>

<p>```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Again, here’s the <a href="http://young-flower-9677.herokuapp.com/">demo</a> and <a href="https://github.com/skalb/trackbone">source</a></p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Extending and Refactoring Views in Backbone.js]]></title>
=======
    <title type="html"><![CDATA[Extending and refactoring views in Backbone.js]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone/"/>
    <updated>2012-04-26T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone</id>
    <content type="html"><![CDATA[<p>In a <a href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/">previous post</a>, I built an example single page app using Backbone. One thing that bothered me was how similar the views are, yet didn&rsquo;t share any code. I think part of this was that I originally scaffolded the entire app and worked backwards.</p>

<!--more-->


<<<<<<< HEAD
<p>For example, here&rsquo;s Project vs Feature Index Templates:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing projects&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="projects-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>vs.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing features&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="features-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>This is easily refactored to:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing &lt;%= type %>&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="items-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>Similarly, the New View changed from:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New project&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-project" name="project">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create Project" />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>to</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New &lt;%= type %>&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-item">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create &lt;%= type %>&ldquo; />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>Great, that was easy and now I just reduced my total Templates. To share functionality between the Views I needed to create a base View class:</p>

<pre><code class="coffeescript">Trackbone.Views ||= {}

class Trackbone.Views.IndexView extends Backbone.View
  template: JST["backbone/templates/index"]

  initialize: () -&gt;
    @options.items.bind('reset', @addAll)
    @options.items.bind('sync', @addAll)

  addAll: () =&gt;
    # This shouldn't be needed, but for some reason
    # lists are rendered twice
    @$("tbody").html('')

    @options.items.each(@addOne)

  addOne: (item) =&gt;
    item.collection = @options.items
    @$("tbody").append(@getView({model: item}).render().el)

  render: =&gt;
    $(@el).html(@template(type: @options.type))
    @addAll()

    return this
</code></pre>

<p>First thing to note is that this View has an initialize method. But that method will never be called automatically because we&rsquo;re going to extend this View into a new class and create an instance of the subclass instead. Also note that we&rsquo;re calling a function getView() that isn&rsquo;t defined in this class.</p>

<pre><code class="coffeescript">#= require ../index_view

Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.IndexView extends Trackbone.Views.IndexView
  initialize: () -&gt;
    super
    @options.type = "Projects"

  getView: (options) =&gt;
    new Trackbone.Views.Projects.ProjectView(options)
</code></pre>

=======
<p>For example, here&rsquo;s Project vs Feature Index Templates:
``` html</p>

<h1>Listing projects</h1>




<table id="projects-table">
  <tr>
    <th>Name</th>
    <th></th>
  </tr>
</table>




<br/>


<p>```</p>

<p>vs.</p>

<p>``` html</p>

<h1>Listing features</h1>




<table id="features-table">
  <tr>
    <th>Name</th>
    <th></th>
  </tr>
</table>




<br/>


<p>```</p>

<p>This is easily refactored to:
``` html</p>

<h1>Listing <%= type %></h1>




<table id="items-table">
  <tr>
    <th>Name</th>
    <th></th>
  </tr>
</table>




<br/>


<p><code>
Similarly, the New View changed from:
</code> html</p>

<h1>New project</h1>


<p><form id="new-project" name="project">
  <div class="field"></p>

<pre><code>&lt;label for="name"&gt; name:&lt;/label&gt;
&lt;input type="text" name="name" id="name" value="&lt;%= name %&gt;" &gt;
</code></pre>

<p>  </div></p>

<p>  <div class="actions"></p>

<pre><code>&lt;input type="submit" value="Create Project" /&gt;
</code></pre>

<p>  </div></p>

<p></form>
<code>
to
</code> html</p>

<h1>New <%= type %></h1>


<p><form id="new-item">
  <div class="field"></p>

<pre><code>&lt;label for="name"&gt; name:&lt;/label&gt;
&lt;input type="text" name="name" id="name" value="&lt;%= name %&gt;" &gt;
</code></pre>

<p>  </div></p>

<p>  <div class="actions"></p>

<pre><code>&lt;input type="submit" value="Create &lt;%= type %&gt;" /&gt;
</code></pre>

<p>  </div></p>

<p></form>
```</p>

<p>Great, that was easy and now I just reduced my total Templates. To share functionality between the Views I needed to create a base View class:</p>

<p>``` coffeescript
Trackbone.Views ||= {}</p>

<p>class Trackbone.Views.IndexView extends Backbone.View
  template: JST[&ldquo;backbone/templates/index&rdquo;]</p>

<p>  initialize: () &ndash;></p>

<pre><code>@options.items.bind('reset', @addAll)
@options.items.bind('sync', @addAll)
</code></pre>

<p>  addAll: () =></p>

<pre><code># This shouldn't be needed, but for some reason
# lists are rendered twice
@$("tbody").html('')

@options.items.each(@addOne)
</code></pre>

<p>  addOne: (item) =></p>

<pre><code>item.collection = @options.items
@$("tbody").append(@getView({model: item}).render().el)
</code></pre>

<p>  render: =></p>

<pre><code>$(@el).html(@template(type: @options.type))
@addAll()

return this
</code></pre>

<p>```</p>

<p>First thing to note is that this View has an initialize method. But that method will never be called automatically because we&rsquo;re going to extend this View into a new class and create an instance of the subclass instead. Also note that we&rsquo;re calling a function getView() that isn&rsquo;t defined in this class.</p>

<p>``` coffeescript</p>

<h1>= require ../index_view</h1>

<p>Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.Projects.IndexView extends Trackbone.Views.IndexView
  initialize: () &ndash;></p>

<pre><code>super
@options.type = "Projects"
</code></pre>

<p>  getView: (options) =></p>

<pre><code>new Trackbone.Views.Projects.ProjectView(options)
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>We can call the into the parent class by using super in this view&rsquo;s initialize. This is just a <a href="http://coffeescript.org/#classes">CoffeeScript shortcut</a> to apply the same arguments to the parent&rsquo;s constructor. I&rsquo;ve also explicitly required the parent View class since Rails does not guarantee which order JavaScript files will be loaded in the browser. The getView function here creates the correct ItemView based off the Project model.</p>

<p>The New item View shown below is generic enough that it did not need to be extended for each model.</p>

<<<<<<< HEAD
<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.NewView extends Backbone.View
  template: JST["backbone/templates/new"]

  events:
    "submit #new-item": "save"

  save: (e) -&gt;
    e.preventDefault()
    e.stopPropagation()

    name = @.$("#new-item #name").val()
    if name
      $("#new-item #name").val('')
      @collection.create(name: name)

  render: -&gt;
    $(@el).html(@template(type: @options.type))

    return this
</code></pre>

<p>The Item View is a bit trickier because it contained the select handling for when an item was clicked. To be able to reuse the handling, I had to make the load methods consistently named loadChildren as shown below.</p>

<pre><code class="coffeescript">class Trackbone.Models.Project extends Backbone.Model
  paramRoot: 'project'

  defaults:
    name: null

  loadChildren: -&gt;
    @children = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});

class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: '/projects'
</code></pre>

<p>One thing to point out in the Item View base class is that I believe I could have used the <a href="http://coffeescript.org/#fat_arrow">fat arrow</a> to retain the correct context.</p>

<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.ItemView extends Backbone.View
  template: JST["backbone/templates/item"]

  events:
    "click .select" : "select"
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  select: () -&gt;
    if @model.loadChildren
      window.toggleSelected(@el)
      @model.loadChildren()
      do (@model, @renderChildren) -&gt;
        @model.children.fetch(
          success: @renderChildren(@model.children)
        )
        @model.children.fetch()

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    $(@el).html(@template(@model.toJSON() ))
    return this
</code></pre>

<p>Now the actual Project view only had to define how to render it&rsquo;s children.</p>

<pre><code class="coffeescript">#= require ../item_view

Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.ProjectView extends Trackbone.Views.ItemView
  template: JST["backbone/templates/item"]

  renderChildren: (children) -&gt;
    featuresView = new Trackbone.Views.Features.IndexView(items: children)
    $("#list-features").html(featuresView.render().el)

    # We should probably only render this once instead of each load
    newFeaturesView = new Trackbone.Views.NewView(collection: children, type: "Features")
    $("#new-features").html(newFeaturesView.render().el)

    $("#list-bugs").html('')
    $("#new-bugs").html('')
</code></pre>

<p>Again, here&rsquo;s the <a href="http://young-flower-9677.herokuapp.com/%22>demo&lt;/a>%20and%20&lt;a%20href=%22https://github.com/skalb/trackbone/tree/version2&#8221;>source</a>.</p>
=======
<p>``` coffeescript
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.NewView extends Backbone.View
  template: JST[&ldquo;backbone/templates/new&rdquo;]</p>

<p>  events:</p>

<pre><code>"submit #new-item": "save"
</code></pre>

<p>  save: (e) &ndash;></p>

<pre><code>e.preventDefault()
e.stopPropagation()

name = @.$("#new-item #name").val()
if name
  $("#new-item #name").val('')
  @collection.create(name: name)
</code></pre>

<p>  render: &ndash;></p>

<pre><code>$(@el).html(@template(type: @options.type))

return this
</code></pre>

<p>```</p>

<p>The Item View is a bit trickier because it contained the select handling for when an item was clicked. To be able to reuse the handling, I had to make the load methods consistently named loadChildren as shown below.</p>

<p>``` coffeescript
class Trackbone.Models.Project extends Backbone.Model
  paramRoot: &lsquo;project&rsquo;</p>

<p>  defaults:</p>

<pre><code>name: null
</code></pre>

<p>  loadChildren: &ndash;></p>

<pre><code>@children = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});
</code></pre>

<p>class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: &lsquo;/projects&rsquo;
```</p>

<p>One thing to point out in the Item View base class is that I believe I could have used the <a href="http://coffeescript.org/#fat_arrow">fat arrow</a> to retain the correct context.</p>

<p>``` coffeescript
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.ItemView extends Backbone.View
  template: JST[&ldquo;backbone/templates/item&rdquo;]</p>

<p>  events:</p>

<pre><code>"click .select" : "select"
"click .destroy" : "destroy"
</code></pre>

<p>  tagName: &ldquo;tr&rdquo;
  className: &ldquo;item&rdquo;</p>

<p>  select: () &ndash;></p>

<pre><code>if @model.loadChildren
  window.toggleSelected(@el)
  @model.loadChildren()
  do (@model, @renderChildren) -&gt;
    @model.children.fetch(
      success: @renderChildren(@model.children)
    )
    @model.children.fetch()
</code></pre>

<p>  destroy: () &ndash;></p>

<pre><code>@model.destroy()
this.remove()

return false
</code></pre>

<p>  render: &ndash;></p>

<pre><code>$(@el).html(@template(@model.toJSON() ))
return this
</code></pre>

<p>```</p>

<p>Now the actual Project view only had to define how to render it&rsquo;s children.</p>

<p>``` coffeescript</p>

<h1>= require ../item_view</h1>

<p>Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.Projects.ProjectView extends Trackbone.Views.ItemView
  template: JST[&ldquo;backbone/templates/item&rdquo;]</p>

<p>  renderChildren: (children) &ndash;></p>

<pre><code>featuresView = new Trackbone.Views.Features.IndexView(items: children)
$("#list-features").html(featuresView.render().el)

# We should probably only render this once instead of each load
newFeaturesView = new Trackbone.Views.NewView(collection: children, type: "Features")
$("#new-features").html(newFeaturesView.render().el)

$("#list-bugs").html('')
$("#new-bugs").html('')
</code></pre>

<p>```</p>

<p>Again, here&rsquo;s the <a href="http://young-flower-9677.herokuapp.com/%22>demo&lt;/a>%20and%20&lt;a%20href=%22https://github.com/skalb/trackbone/tree/version2">source</a>.</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>I think this is a big improvement over the first version, though it&rsquo;s not quite as good as it could be. Having the loadChildren logic in the views doesn&rsquo;t really make sense, but I&rsquo;m leaving those changes for when I implement permalinks.</p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[How to (Easily) Handle Model Relationships in Rails and Backbone.js]]></title>
=======
    <title type="html"><![CDATA[How to (easily) handle model relationships in Rails and Backbone.js]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/"/>
    <updated>2012-04-23T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js</id>
    <content type="html"><![CDATA[<p>While playing around with Backbone.js, I couldn&rsquo;t find an easy way to build an app that used the RESTful hierarchy of my models. I think <a href="http://spinejs.com/docs/relations">Spine&rsquo;s</a> implementation is fairly straightforward.</p>

<p>I did find a relevant <a href="https://github.com/PaulUithol/Backbone-relational">active project</a>, but for my specific case the added complexity of an additional component and dependency didn&rsquo;t seem justified. Rails already does the hard part for me, I just need Backbone to call the correct Urls.</p>

<p>I wanted to learn more about Backbone, so I prototyped a very basic project management app using Rails and Backbone called Trackbone that I&rsquo;ll walk through in this post.</p>

<!--more-->


<p>Briefly, this is a single page three panel app with drill-downs:</p>

<ul>
    <li>Many projects</li>
    <li>Project has many Features</li>
    <li>Featurehas many Bugs</li>
</ul>


<p><a href="http://young-flower-9677.herokuapp.com/">Demo on Heroku</a>
<a href="https://github.com/skalb/trackbone/tree/version1">Source</a></p>

<p><strong>Rails backend:</strong></p>

<p>Rails controllers provide the REST API for our Backbone app. I haven&rsquo;t inlined them here since they only have a few modifications post-scaffolding, but you can view them <a href="https://github.com/skalb/trackbone/tree/version1/app/controllers">here</a></p>

<p>Modifications:</p>

<ul>
<li>Projects#index is moved to HomeController</li>
<li>Location is not returned in response after #create</li>
<li>Model is returned after #update</li>
</ul>


<<<<<<< HEAD
<pre><code class="ruby routes.rb">root :to =&gt; "home#index"

Trackbone::Application.routes.draw do
  resources :projects do
    resources :features do
      resources :bugs
    end
  end
end
</code></pre>

=======
<p>``` ruby routes.rb
root :to => &ldquo;home#index&rdquo;</p>

<p>Trackbone::Application.routes.draw do
  resources :projects do</p>

<pre><code>resources :features do
  resources :bugs
end
</code></pre>

<p>  end
end
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>For setting up Backbone, the rails-backbone gem provides a good <a href="https://github.com/codebrew/backbone-rails/blob/master/README.md">guide</a>.</p>

<p>Originally, I scaffolded Backbone here as well. On review, I&rsquo;m not sure I would do that again. I think you&rsquo;ll end at a better design if you start from scratch.</p>

<p><strong>Creating Backbone Models:</strong></p>

<p>Features only exist in the context of a Project, so they should only be loaded for a specific Project and similarly for Bugs.</p>

<<<<<<< HEAD
<pre><code class="coffeescript javascripts/backbone/models/project.js.coffee">class Trackbone.Models.Project extends Backbone.Model
  paramRoot: 'project'

  defaults:
    name: null

  loadFeatures: -&gt;
    @features = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});

class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: '/projects'
</code></pre>

<p>On reflection, loadFeatures is poorly named. It&rsquo;s really more of an &lsquo;initialize&rsquo;, but anyways, calling that method will create a FeaturesCollection and pass in the Url for this project. You can see how this is used in the Features model</p>

<pre><code class="coffeescript javascripts/backbone/models/feature.js.coffee">class Trackbone.Models.Feature extends Backbone.Model
  paramRoot: 'feature'

  defaults:
    name: null

  loadBugs: -&gt;
    @bugs = new Trackbone.Collections.BugsCollection([], {feature_url: @url()});

class Trackbone.Collections.FeaturesCollection extends Backbone.Collection
  model: Trackbone.Models.Feature
  initialize: (model, args) -&gt;
    @url = -&gt;
      args.project_url + "/features"
</code></pre>

<p>Using the project_url from args will prepend all RESTful requests made on the features model with projects/:project_id.</p>

<pre><code class="coffeescript javascripts/backbone/models/bug.js.coffee">class Trackbone.Models.Bug extends Backbone.Model
  paramRoot: 'bug'

  defaults:
    name: null

class Trackbone.Collections.BugsCollection extends Backbone.Collection
  model: Trackbone.Models.Bug
  initialize: (model, args) -&gt;
    @url = -&gt;
      args.feature_url + "/bugs"
</code></pre>

=======
<p>``` coffeescript javascripts/backbone/models/project.js.coffee
class Trackbone.Models.Project extends Backbone.Model
  paramRoot: &lsquo;project&rsquo;</p>

<p>  defaults:</p>

<pre><code>name: null
</code></pre>

<p>  loadFeatures: &ndash;></p>

<pre><code>@features = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});
</code></pre>

<p>class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: &lsquo;/projects&rsquo;
```</p>

<p>On reflection, loadFeatures is poorly named. It&rsquo;s really more of an &lsquo;initialize&rsquo;, but anyways, calling that method will create a FeaturesCollection and pass in the Url for this project. You can see how this is used in the Features model</p>

<p>``` coffeescript javascripts/backbone/models/feature.js.coffee
class Trackbone.Models.Feature extends Backbone.Model
  paramRoot: &lsquo;feature&rsquo;</p>

<p>  defaults:</p>

<pre><code>name: null
</code></pre>

<p>  loadBugs: &ndash;></p>

<pre><code>@bugs = new Trackbone.Collections.BugsCollection([], {feature_url: @url()});
</code></pre>

<p>class Trackbone.Collections.FeaturesCollection extends Backbone.Collection
  model: Trackbone.Models.Feature
  initialize: (model, args) &ndash;></p>

<pre><code>@url = -&gt;
  args.project_url + "/features"
</code></pre>

<p>```</p>

<p>Using the project_url from args will prepend all RESTful requests made on the features model with projects/:project_id.</p>

<p>``` coffeescript javascripts/backbone/models/bug.js.coffee
class Trackbone.Models.Bug extends Backbone.Model
  paramRoot: &lsquo;bug&rsquo;</p>

<p>  defaults:</p>

<pre><code>name: null
</code></pre>

<p>class Trackbone.Collections.BugsCollection extends Backbone.Collection
  model: Trackbone.Models.Bug
  initialize: (model, args) &ndash;></p>

<pre><code>@url = -&gt;
  args.feature_url + "/bugs"
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p><strong>Backbone Routers:</strong></p>

<p>Next we need to create the Projects router which will be the entry point into our single page app.</p>

<<<<<<< HEAD
<pre><code class="coffeescript javascripts/backbone/routers/projects_router.js.coffee">class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) -&gt;
    @projects = new Trackbone.Collections.ProjectsCollection()
    @projects.reset options.projects

  routes:
    ".*" : "index"

  index: -&gt;
    @view = new Trackbone.Views.Projects.IndexView(projects: @projects)
    $("#list-projects").html(@view.render().el)

    @newProjectView = new Trackbone.Views.Projects.NewView(collection: @projects)
    $("#new-projects").html(@newProjectView.render().el)
</code></pre>

=======
<p>``` coffeescript javascripts/backbone/routers/projects_router.js.coffee
class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) &ndash;></p>

<pre><code>@projects = new Trackbone.Collections.ProjectsCollection()
@projects.reset options.projects
</code></pre>

<p>  routes:</p>

<pre><code>".*" : "index"
</code></pre>

<p>  index: &ndash;></p>

<pre><code>@view = new Trackbone.Views.Projects.IndexView(projects: @projects)
$("#list-projects").html(@view.render().el)

@newProjectView = new Trackbone.Views.Projects.NewView(collection: @projects)
$("#new-projects").html(@newProjectView.render().el)
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Because we&rsquo;re not worrying about permalinks (yet! I&rsquo;ve started looking into this, and hope to create a follow-up post), we only need one catch-all route. We then pass in the respective models to our views.</p>

<p><strong>Listing projects:</strong></p>

<<<<<<< HEAD
<p>&#8220;` html views/projects/index.html.erb</p>
=======
<p>``` html views/projects/index.html.erb</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<h1>Trackbone</h1>


<hr>


<div class="container">
  <div id="new-projects"></div>
  <div id="list-projects"></div>
</div>


<div class="container">
  <div id="new-features"></div>
  <div id="list-features"></div>
</div>


<div class="container">
  <div id="new-bugs"></div>
  <div id="list-bugs"></div>
</div>




<script type="text/javascript">
  $(function() {
    window.router = new Trackbone.Routers.ProjectsRouter(
      { projects: <%= @projects.to_json.html_safe -%> }
    );
    Backbone.history.start();
  });
</script>


<<<<<<< HEAD
<p>&#8220;`</p>
=======
<p>```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>There is a container, new, and list div for each model. Backbone will load data from our Rest API, build HTML using the Views and Templates and inject that HTML into those DIV elements. Note that we are passing in projects from Rails to the router. This allows us to grab data from the server when the page is first requested and save an additional call on page load. Since this is a single page app, this is the only Rails view we need.</p>

<p>To display our Project data we need three templates: index to list projects, project for a specific item, and new to create a project.</p>

<<<<<<< HEAD
<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;td>&lt;a href="#" class="select">&lt;%= name %>&lt;/td>
</span><span class='line'>&lt;td>&lt;a href="#%22%20class=%22destroy">Destroy&lt;/a>&lt;/td></span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing projects&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="projects-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;br/></span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New project&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-project" name="project">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create Project" />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>These should be fairly self-explanatory. Each template will also need a Backbone View as well.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/index_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.IndexView extends Backbone.View
  template: JST["backbone/templates/projects/index"]

  initialize: () -&gt;
    @options.projects.bind('reset', @addAll)
    @options.projects.bind('sync', @render)

  addAll: () =&gt;
    @options.projects.each(@addOne)

  addOne: (project) =&gt;
    view = new Trackbone.Views.Projects.ProjectView({model : project})
    @$("tbody").append(view.render().el)

  render: =&gt;
    $(@el).html(@template(projects: @options.projects.toJSON()))
    @addAll()

    return this
</code></pre>

<p>This view receives the entire list of projects, renders the index view and appends a project view for each project.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/new_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.NewView extends Backbone.View
  template: JST["backbone/templates/projects/new"]

  events:
    "submit #new-project": "save"

  save: (e) -&gt;
    e.preventDefault()
    e.stopPropagation()

    name = $("#new-project #name").val()
    if name
      $("#new-project #name").val('')
      @collection.create(name: name)

  render: -&gt;
    $(@el).html(@template())

    return this
</code></pre>

<p>The new view simply providers a handler for creating a new project within the collection. The create method actually does three things: creates the model, POSTs the model to the server, and adds the model to the collection.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/project_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.ProjectView extends Backbone.View
  template: JST["backbone/templates/shared/item"]

  events:
    "click .select" : "select"
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  select: () -&gt;
    window.toggleSelected(@el)
    @model.loadFeatures()
    do (@model) -&gt;
      @model.features.fetch success: -&gt;
        featuresView = new Trackbone.Views.Features.IndexView(features: @model.features)
        $("#list-features").html(featuresView.render().el)

        # We should probably only render this once instead of each load
        newFeaturesView = new Trackbone.Views.Features.NewView(collection: @model.features)
        $("#new-features").html(newFeaturesView.render().el)

        $("#list-bugs").html('')
        $("#new-bugs").html('')
    @model.features.fetch()

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    $(@el).html(@template(@model.toJSON() ))
    return this
</code></pre>

=======
<p><code>html javascripts/backbone/templates/shared/item.jst.ejs
&lt;td&gt;&lt;a href="#" class="select"&gt;&lt;%= name %&gt;&lt;/td&gt;
&lt;td&gt;[Destroy](#" class="destroy)&lt;/td&gt;
</code></p>

<p>``` html javascripts/backbone/templates/projects/index.jst.ejs</p>

<h1>Listing projects</h1>




<table id="projects-table">
  <tr>
    <th>Name</th>
    <th></th>
  </tr>
</table>




<br/>


<p>```</p>

<p>``` html javascripts/backbone/templates/projects/new.jst.ejs</p>

<h1>New project</h1>


<p><form id="new-project" name="project">
  <div class="field"></p>

<pre><code>&lt;label for="name"&gt; name:&lt;/label&gt;
&lt;input type="text" name="name" id="name" value="&lt;%= name %&gt;" &gt;
</code></pre>

<p>  </div></p>

<p>  <div class="actions"></p>

<pre><code>&lt;input type="submit" value="Create Project" /&gt;
</code></pre>

<p>  </div></p>

<p></form>
```</p>

<p>These should be fairly self-explanatory. Each template will also need a Backbone View as well.</p>

<p>``` coffeescript javascripts/backbone/views/projects/index_view.js.coffee
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.Projects.IndexView extends Backbone.View
  template: JST[&ldquo;backbone/templates/projects/index&rdquo;]</p>

<p>  initialize: () &ndash;></p>

<pre><code>@options.projects.bind('reset', @addAll)
@options.projects.bind('sync', @render)
</code></pre>

<p>  addAll: () =></p>

<pre><code>@options.projects.each(@addOne)
</code></pre>

<p>  addOne: (project) =></p>

<pre><code>view = new Trackbone.Views.Projects.ProjectView({model : project})
@$("tbody").append(view.render().el)
</code></pre>

<p>  render: =></p>

<pre><code>$(@el).html(@template(projects: @options.projects.toJSON()))
@addAll()

return this
</code></pre>

<p>```</p>

<p>This view receives the entire list of projects, renders the index view and appends a project view for each project.</p>

<p>``` coffeescript javascripts/backbone/views/projects/new_view.js.coffee
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.Projects.NewView extends Backbone.View
  template: JST[&ldquo;backbone/templates/projects/new&rdquo;]</p>

<p>  events:</p>

<pre><code>"submit #new-project": "save"
</code></pre>

<p>  save: (e) &ndash;></p>

<pre><code>e.preventDefault()
e.stopPropagation()

name = $("#new-project #name").val()
if name
  $("#new-project #name").val('')
  @collection.create(name: name)
</code></pre>

<p>  render: &ndash;></p>

<pre><code>$(@el).html(@template())

return this
</code></pre>

<p>```</p>

<p>The new view simply providers a handler for creating a new project within the collection. The create method actually does three things: creates the model, POSTs the model to the server, and adds the model to the collection.</p>

<p>``` coffeescript javascripts/backbone/views/projects/project_view.js.coffee
Trackbone.Views.Projects ||= {}</p>

<p>class Trackbone.Views.Projects.ProjectView extends Backbone.View
  template: JST[&ldquo;backbone/templates/shared/item&rdquo;]</p>

<p>  events:</p>

<pre><code>"click .select" : "select"
"click .destroy" : "destroy"
</code></pre>

<p>  tagName: &ldquo;tr&rdquo;
  className: &ldquo;item&rdquo;</p>

<p>  select: () &ndash;></p>

<pre><code>window.toggleSelected(@el)
@model.loadFeatures()
do (@model) -&gt;
  @model.features.fetch success: -&gt;
    featuresView = new Trackbone.Views.Features.IndexView(features: @model.features)
    $("#list-features").html(featuresView.render().el)

    # We should probably only render this once instead of each load
    newFeaturesView = new Trackbone.Views.Features.NewView(collection: @model.features)
    $("#new-features").html(newFeaturesView.render().el)

    $("#list-bugs").html('')
    $("#new-bugs").html('')
@model.features.fetch()
</code></pre>

<p>  destroy: () &ndash;></p>

<pre><code>@model.destroy()
this.remove()

return false
</code></pre>

<p>  render: &ndash;></p>

<pre><code>$(@el).html(@template(@model.toJSON() ))
return this
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>This view is really the heart of the app. Every time a Project is selected, we&rsquo;ll display the Features for that Project by calling fetch() and binding to success().</p>

<p>I&rsquo;m not going to inline the templates and views for Features and Bugs since they are more or less identical, but feel free to browse through all the <a href="https://github.com/skalb/trackbone/tree/version1/app/assets/javascripts/backbone">client side code</a></p>

<p>Again, here&rsquo;s a working <a href="http://young-flower-9677.herokuapp.com/">demo</a>.</p>

<p>Please provide any feedback you have in the comments. Was this useful? Too long? Too much/too little code inline? I&rsquo;m currently working on a couple more entires that will build on this one as I&rsquo;m learning more about Backbone.js, so feedback is definitely useful.</p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Creating a Document Sharing Site With Meteor.js]]></title>
=======
    <title type="html"><![CDATA[Creating a document sharing site with Meteor.js]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/04/16/creating-a-document-sharing-site-with-meteor-js/"/>
    <updated>2012-04-16T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/16/creating-a-document-sharing-site-with-meteor-js</id>
    <content type="html"><![CDATA[<p><strong>Background:</strong></p>

<p>“Meteor is a set of new technologies for building top-quality web apps in a fraction of the time, whether you&rsquo;re an expert developer or just getting started.”
<<<<<<< HEAD
- <a href="http://www.meteor.com">Meteor.com</a></p>
=======
&ndash; <a href="http://www.meteor.com">Meteor.com</a></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Goal:</strong></p>

<p>Create and deploy a real time document sharing website. The final product is at: <a href="http://docshare-tutorial.meteor.com">docshare-tutorial.meteor.com</a>.</p>

<!--more-->


<p><strong>Updated: Source code at <a href="https://github.com/skalb/docshare-tutorial">https://github.com/skalb/docshare-tutorial</a></strong></p>

<p><strong>Spec:</strong></p>

<ul>
<li>Single page app with two sections</li>
<li>Section 1

<ul>
<li>List of documents each with edit and delete buttons</li>
<li>Create new document button with name input</li>
</ul>
</li>
<li>Section 2

<ul>
<li>Text area of the document currently being edited</li>
</ul>
</li>
</ul>


<p><strong>Prerequisites:</strong></p>

<ul>
<li>Install Meteor</li>
</ul>


<<<<<<< HEAD
<pre><code class="bash">$ curl install.meteor.com | /bin/sh
</code></pre>
=======
<p><code>bash
$ curl install.meteor.com | /bin/sh
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Step 1: Getting things started</strong></p>

<p>Lets create the app:</p>

<<<<<<< HEAD
<pre><code class="bash">meteor create docshare-tutorial
</code></pre>

<p>Now, start the meteor server:</p>

<pre><code class="bash">cd docshare-tutorial
meteor
</code></pre>
=======
<p><code>bash
meteor create docshare-tutorial
</code></p>

<p>Now, start the meteor server:</p>

<p><code>bash
cd docshare-tutorial
meteor
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>You should see the default site at <a href="http://localhost:3000/">http://localhost:3000</a>:</p>

<p>Lastly, add the other packages we are going to use</p>

<<<<<<< HEAD
<pre><code class="bash">meteor add coffeescript
meteor add backbone
</code></pre>
=======
<p><code>bash
meteor add coffeescript
meteor add backbone
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Step 2: Setting up the project</strong></p>

<p>Go ahead and delete <strong>docshare-tutorial.js</strong> and empty out the contents of <strong>docshare-tutorial.html</strong>.</p>

<p>Meteor lets you separate client and server code in 2 different ways:</p>

<ol>
<li>Using the Meteor.is_client and Meteor.is_server flags</li>
<li>Place client and server Javascript in the /client and /server folders, respectively. Any Javascript at the root level with run on both.</li>
</ol>


<p>I prefer method 2 since it feels a bit cleaner to me, but feel free to instead combine everything into one file. Create <strong>docshare-tutorial.coffee</strong>  at the root and <strong>client.coffee</strong>  in /client folder and <strong>server.coffee</strong> in the /server folder.</p>

<p><strong>Step 3: Server</strong></p>

<p>Collections in Meteor are schemaless. We want our documents collection to be available to both the server and the client so we’ll add it to the root level.</p>

<<<<<<< HEAD
<pre><code class="coffeescript docshare-tutorial.coffee"> @Documents = new Meteor.Collection("documents")
</code></pre>

<p>Our document object will have two fields: name and text. Let’s create a sample document on startup.</p>

<pre><code class="coffeescript server.coffee">Meteor.startup -&gt;
  if Documents.find().count() is 0
    Documents.insert
      name: "Sample doc"
      text: "Write here..."
</code></pre>

<p>Now, if you restart the meteor server, you’ll be able to access that document in the browser. Try this in the developer console:</p>

<pre><code class="javascript console">Documents.findOne()
</code></pre>
=======
<p>``` coffeescript docshare-tutorial.coffee
 @Documents = new Meteor.Collection(&ldquo;documents&rdquo;)</p>

<p>```</p>

<p>Our document object will have two fields: name and text. Let’s create a sample document on startup.</p>

<p>``` coffeescript server.coffee
Meteor.startup &ndash;>
  if Documents.find().count() is 0</p>

<pre><code>Documents.insert
  name: "Sample doc"
  text: "Write here..."
</code></pre>

<p>```</p>

<p>Now, if you restart the meteor server, you’ll be able to access that document in the browser. Try this in the developer console:</p>

<p><code>javascript console
Documents.findOne()
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>You will see an object with the properties we just created. This is the only time you should need to restart the meteor server.</p>

<p><strong>Step 4: Client HTML</strong></p>

<p>Here’s we’ll define our head and body. The body will render two templates: documentList and documentView.</p>

<<<<<<< HEAD
<pre><code>&lt;head&gt;
  &lt;title&gt;docshare&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;hr&gt;
  
&lt;/body&gt;
</code></pre>

<p>Next, create the two templates needed to display the documents: documentList and document.</p>

<pre><code>&lt;template name="documentList"&gt;
  &lt;h1&gt;Welcome to document sharing!&lt;/h1&gt;
  &lt;div&gt;
    
      
    
  &lt;/div&gt;
  &lt;div id="createDocument"&gt;
    Name: &lt;input type="text" id="new-document-name" placeholder="New document" /&gt;&lt;input type="button" id="new-document" value="create"/&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

=======
<p>```
<head>
  <title>docshare</title>
</head>
<body>
  
  <hr>
  
</body></p>

<p>```</p>

<p>Next, create the two templates needed to display the documents: documentList and document.</p>

<p>```
<template name="documentList">
  <h1>Welcome to document sharing!</h1>
  <div></p>

<pre><code>
  

</code></pre>

<p>  </div>
  <div id="createDocument"></p>

<pre><code>Name: &lt;input type="text" id="new-document-name" placeholder="New document" /&gt;&lt;input type="button" id="new-document" value="create"/&gt;
</code></pre>

<p>  </div>
</template>
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Here we are using the built in Handlebars iterator #each to render the individual document objects. Finally, there’s a input field and create button to add a new document.</p>

<p>Now add the template to list the documents names each with an edit and delete button. We’ll also use a template method to determine which document is selected.</p>

<<<<<<< HEAD
<pre><code>&lt;template name="document"&gt;
  &lt;div class="document "&gt;
    &lt;p&gt;
    
    &lt;input type="button" id="edit-document" value="Edit"/&gt;
    &lt;input type="button" id="delete-document" value="Delete"/&gt;
    &lt;/p&gt;
   &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>Lastly, let’s add the actual text field that the users can edit.</p>

<pre><code>&lt;template name="documentView"&gt;
  
  
    &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
        &lt;textarea id="document-text" rows="10" cols="80"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
   
   
&lt;/template&gt;
</code></pre>

=======
<p>```
<template name="document">
  <div class="document "></p>

<pre><code>&lt;p&gt;

&lt;input type="button" id="edit-document" value="Edit"/&gt;
&lt;input type="button" id="delete-document" value="Delete"/&gt;
&lt;/p&gt;
</code></pre>

<p>   </div>
</template>
```</p>

<p>Lastly, let’s add the actual text field that the users can edit.</p>

<p>```
<template name="documentView">
  
  </p>

<pre><code>&lt;div&gt;
  &lt;p&gt;&lt;/p&gt;
    &lt;textarea id="document-text" rows="10" cols="80"&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>

<p>   
   
</template>
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Note that this will only be rendered if a document is currently selected. Having both an #if and a #with seems redundant, but I didn’t see a better way. Based off the Handlebars documentation, I should only need the #if, but that doesn’t work.</p>

<p><strong>Step 5: Client Coffeescript</strong></p>

<p>First, we’ll setup a Backbone router to allow us to keep track of which document we’re viewing. This will allow us to support page refreshes and permalinking to documents.</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">DocumentsRouter = Backbone.Router.extend(
  routes:
    ":document_id": "main"

  main: (document_id) -&gt;
    Session.set "document_id", document_id

  setDocument: (document_id) -&gt;
    @navigate(document_id, true)
)

Router = new DocumentsRouter

Meteor.startup -&gt;
  Backbone.history.start pushState: true
</code></pre>

=======
<p>``` coffeescript client.coffee
DocumentsRouter = Backbone.Router.extend(
  routes:</p>

<pre><code>":document_id": "main"
</code></pre>

<p>  main: (document_id) &ndash;></p>

<pre><code>Session.set "document_id", document_id
</code></pre>

<p>  setDocument: (document_id) &ndash;></p>

<pre><code>@navigate(document_id, true)
</code></pre>

<p>)</p>

<p>Router = new DocumentsRouter</p>

<p>Meteor.startup &ndash;>
  Backbone.history.start pushState: true
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Basically this will store the document_id into the Meteor session whenever the user navigates to a URL or form /:document_id. If you’re not familar with Backbone, don’t worry about this, or read up at <a href="http://backbonejs.org/">http://backbonejs.org/</a></p>

<p>We are also using Meteor.startup again here but for a different purpose. On the client side it will run after DOM is loaded every time. I think it would be more clear if this method didn’t mean different things based on context.</p>

<p>Next, we need to define where the documentList template gets its data and handle the create new button</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.documentList.documents = -&gt;
  Documents.find({},
    sort:
      name: 1
  )

Template.documentList.events =
  'click #new-document': (e) -&gt;
    name = $('#new-document-name').val()
    if name
      Documents.insert(
        name: name
        text: ""
      )
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.documentList.documents = &ndash;>
  Documents.find({},</p>

<pre><code>sort:
  name: 1
</code></pre>

<p>  )</p>

<p>Template.documentList.events =
  &lsquo;click #new-document&rsquo;: (e) &ndash;></p>

<pre><code>name = $('#new-document-name').val()
if name
  Documents.insert(
    name: name
    text: ""
  )
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Notice that we’re sorting the documents by name. Each time a new document is added it will be correctly injected into the DOM. The entire list is not recreated. There is also a bit of validation to make sure the name exists.</p>

<p>Documents.insert (and all collection operations) are non-blocking when called client side. Meteor will go ahead and insert the data to the local client and can optionally call a callback with an object identifier or error message after the real operation finishes. This is invisible to the user, of course.</p>

<p>Next, define the selected property and event handlers for edit and delete:</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.document.events =
  'click #delete-document': (e) -&gt;
    Documents.remove(@_id)
  'click #edit-document': (e) -&gt;
    Router.setDocument(@_id)

Template.document.selected = -&gt;
  if Session.equals("document_id", @_id) then "selected" else ""
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.document.events =
  &lsquo;click #delete-document&rsquo;: (e) &ndash;></p>

<pre><code>Documents.remove(@_id)
</code></pre>

<p>  &lsquo;click #edit-document&rsquo;: (e) &ndash;></p>

<pre><code>Router.setDocument(@_id)
</code></pre>

<p>Template.document.selected = &ndash;>
  if Session.equals(&ldquo;document_id&rdquo;, @_id) then &ldquo;selected&rdquo; else &ldquo;&rdquo;
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Note that in handlers for events the this object is the actual Document object.</p>

<p>Next, define the selectedDocument using the id stored in the session and update the text of that document when the user presses a key.</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.documentView.selectedDocument = -&gt;
  document_id = Session.get("document_id")
  Documents.findOne(
    _id: document_id
  )

Template.documentView.events =
  'keyup #document-text': (e) -&gt;
    # @_id should work here, but it doesn't
    sel = _id: Session.get("document_id")
    mod = $set: text: $('#document-text').val()
    Documents.update(sel, mod)
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.documentView.selectedDocument = &ndash;>
  document_id = Session.get(&ldquo;document_id&rdquo;)
  Documents.findOne(</p>

<pre><code>_id: document_id
</code></pre>

<p>  )</p>

<p>Template.documentView.events =
  &lsquo;keyup #document-text&rsquo;: (e) &ndash;></p>

<pre><code># @_id should work here, but it doesn't
sel = _id: Session.get("document_id")
mod = $set: text: $('#document-text').val()
Documents.update(sel, mod)
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Meteor acknowledges in their docs: “For now, the event handler gets the template data from the top level of the current template, not the template data from the template context of the element that triggered the event. This will be changing.” This is why we have to pull the id from the session.</p>

<p>Lastly, add the css style for the selected div:
<code>css docshare-tutorial.css
.selected {
  background-color: yellow;
}
</code></p>

<p><strong>Conclusion:</strong>
That’s it, done! 50 lines of HTML and 50 lines of Coffeescript for a very basic Google docs clone.</p>

<p>To test it out open two browsers and type!</p>
]]></content>
  </entry>
  
</feed>
