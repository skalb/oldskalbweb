<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
  <updated>2015-01-31T18:56:54-08:00</updated>
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handling Permalinks in Backbone.js With Routers]]></title>
    <link href="http://www.skalb.com/2012/04/30/handling-permalinks-in-backbone-js-with-routers/"/>
    <updated>2012-04-30T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/30/handling-permalinks-in-backbone-js-with-routers</id>
    <content type="html"><![CDATA[<p>This post is part of a series:</p>

<ul>
<li><a href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/">First post</a></li></li>
<li><a href="http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone/">Second post</a></li></li>
</ul>


<p>One of the missing features in my prototype was handling of permalinks. To make things easy, I originally removed all the routes and added click handlers instead. In retrospect that was a mistake. Instead of having the app logic tangled up with click handlers, it would have been much more straightforward to define routes and use links.</p>

<p>Here’s the <a href="http://young-flower-9677.herokuapp.com/">demo</a> and <a href="https://github.com/skalb/trackbone">source</a></p>

<!--more-->


<p>In this post, I’m going to explain the  Backbone router step by step. First, I need to actually define what routes I want:</p>

<p>I need:</p>

<ul>
<li>Home page -> Load list of projects</li></li>
<li>Selected project -> Load list of projects and features</li></li>
<li>Selected feature -> Load list of projects, features, and bugs</li></li>
</ul>


<pre><code class="coffeescript">routes:
  ".*"  : "showProjects"
  "projects/:project_id" : "showProjects"
  "projects/:project_id/features/:feature_id/*" : "showProjects"
</code></pre>

<p>Notice that all my routes point to the same function. The only difference is that the project_id and feature_id variables will be undefined. JavaScript won’t complain if your function call doesn’t match the function signature. It will just set them undefined.</p>

<p>Now let’s look at showProjects.</p>

<pre><code class="coffeescript">showProjects: (project_id, feature_id, bug_id) -&gt;
  @renderViews(@projects, project_id, "Projects")

  if project_id
    @loadChildren(@projects, project_id, [feature_id, bug_id], "loadFeatures")
</code></pre>

<p>My original goal was to create a helper method that would support an abitrary length chain of loading children. That is, loadChildren will call loadFeatures which will then call loadChildren again etc. The final implementation isn’t quite that generic since it requires me to construct the individual item_ids at the start.</p>

<p>As I was finishing this prototype , I managed to remove all duplicate code by creating some helper methods.</p>

<pre><code class="coffeescript">clearType: (model) -&gt;
  $("#list-#{model}").html('')
  $("#new-#{model}").html('')

renderView: (selector, view) -&gt;
  $(selector).html(view.render().el)

renderViews: (items, item_id, type) -&gt;
  indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
  @renderView("#list-#{type.toLowerCase()}", indexView)

  newView = new Trackbone.Views.NewView(collection: items, type: type)
  @renderView("#new-#{type.toLowerCase()}", newView)
</code></pre>

<p>And now let’s look at loadChildren:</p>

<pre><code class="coffeescript">loadChildren: (items, item_id, child_ids, callback) -&gt;
  item = items.get(item_id)
  item.loadChildren()
  item.children.fetch(
    success: =&gt;
      @[callback](item.children, child_ids.shift(), child_ids)
  )
  item.children.fetch()
</code></pre>

<p>Okay, why am I indexing into the object with a string instead of just passing the function in directly. Well, because the fat arrow wasn’t working as expected. Either I was doing something wrong or there&rsquo;s a bug in the coffee-rails interpreter because js2coffee gave me a different result.</p>

<p>The full router:</p>

<pre><code class="coffeescript">class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) -&gt;
    @projects = new Trackbone.Collections.ProjectsCollection()
    @projects.reset options.projects

  routes:
    ".*"  : "showProjects"
    "projects/:project_id" : "showProjects"
    "projects/:project_id/features/:feature_id/*" : "showProjects"

  clearType: (model) -&gt;
    $("#list-#{model}").html('')
    $("#new-#{model}").html('')

  loadChildren: (items, item_id, child_ids, callback) -&gt;
    item = items.get(item_id)
    item.loadChildren()
    item.children.fetch(
      success: =&gt;
        @[callback](item.children, child_ids.shift(), child_ids)
    )
    item.children.fetch()

  renderView: (selector, view) -&gt;
    $(selector).html(view.render().el)

  renderViews: (items, item_id, type) -&gt;
    indexView = new Trackbone.Views.IndexView(items: items, id: item_id, type: type)
    @renderView("#list-#{type.toLowerCase()}", indexView)

    newView = new Trackbone.Views.NewView(collection: items, type: type)
    @renderView("#new-#{type.toLowerCase()}", newView)

  showProjects: (project_id, feature_id, bug_id) -&gt;
    @renderViews(@projects, project_id, "Projects")

    if project_id
      @loadChildren(@projects, project_id, [feature_id, bug_id], "loadFeatures")

  loadFeatures: (features, feature_id, child_ids) -&gt;
    @renderViews(features, feature_id, "Features")

    if feature_id
      @loadChildren(features, feature_id, child_ids, "loadBugs")
    else
      @clearType("bugs")

  loadBugs: (bugs, bug_id, child_ids) -&gt;
    @renderViews(bugs, bug_id, "Bugs")
</code></pre>

<p>I also needed to tweak my item view to include the correct url for the select link.</p>

<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.ItemView extends Backbone.View
  template: JST["backbone/templates/item"]

  events:
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    name = @model.get("name")
    id = @model.get("id")
    url = "#{@model.collection.url()}/#{id}"
    $(@el).html(@template(name: name, id: id, url: url))
    if (@options.selected)
      window.toggleSelected(@el)
    return this
</code></pre>

<p>Again, here’s the <a href="http://young-flower-9677.herokuapp.com/">demo</a> and <a href="https://github.com/skalb/trackbone">source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending and Refactoring Views in Backbone.js]]></title>
    <link href="http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone/"/>
    <updated>2012-04-26T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/26/extending-and-refactoring-views-in-backbone</id>
    <content type="html"><![CDATA[<p>In a <a href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/">previous post</a>, I built an example single page app using Backbone. One thing that bothered me was how similar the views are, yet didn&rsquo;t share any code. I think part of this was that I originally scaffolded the entire app and worked backwards.</p>

<!--more-->


<p>For example, here&rsquo;s Project vs Feature Index Templates:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing projects&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="projects-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>vs.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing features&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="features-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>This is easily refactored to:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing &lt;%= type %>&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="items-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></p>

<p>Similarly, the New View changed from:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New project&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-project" name="project">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create Project" />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>to</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New &lt;%= type %>&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-item">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create &lt;%= type %>&ldquo; />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>Great, that was easy and now I just reduced my total Templates. To share functionality between the Views I needed to create a base View class:</p>

<pre><code class="coffeescript">Trackbone.Views ||= {}

class Trackbone.Views.IndexView extends Backbone.View
  template: JST["backbone/templates/index"]

  initialize: () -&gt;
    @options.items.bind('reset', @addAll)
    @options.items.bind('sync', @addAll)

  addAll: () =&gt;
    # This shouldn't be needed, but for some reason
    # lists are rendered twice
    @$("tbody").html('')

    @options.items.each(@addOne)

  addOne: (item) =&gt;
    item.collection = @options.items
    @$("tbody").append(@getView({model: item}).render().el)

  render: =&gt;
    $(@el).html(@template(type: @options.type))
    @addAll()

    return this
</code></pre>

<p>First thing to note is that this View has an initialize method. But that method will never be called automatically because we&rsquo;re going to extend this View into a new class and create an instance of the subclass instead. Also note that we&rsquo;re calling a function getView() that isn&rsquo;t defined in this class.</p>

<pre><code class="coffeescript">#= require ../index_view

Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.IndexView extends Trackbone.Views.IndexView
  initialize: () -&gt;
    super
    @options.type = "Projects"

  getView: (options) =&gt;
    new Trackbone.Views.Projects.ProjectView(options)
</code></pre>

<p>We can call the into the parent class by using super in this view&rsquo;s initialize. This is just a <a href="http://coffeescript.org/#classes">CoffeeScript shortcut</a> to apply the same arguments to the parent&rsquo;s constructor. I&rsquo;ve also explicitly required the parent View class since Rails does not guarantee which order JavaScript files will be loaded in the browser. The getView function here creates the correct ItemView based off the Project model.</p>

<p>The New item View shown below is generic enough that it did not need to be extended for each model.</p>

<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.NewView extends Backbone.View
  template: JST["backbone/templates/new"]

  events:
    "submit #new-item": "save"

  save: (e) -&gt;
    e.preventDefault()
    e.stopPropagation()

    name = @.$("#new-item #name").val()
    if name
      $("#new-item #name").val('')
      @collection.create(name: name)

  render: -&gt;
    $(@el).html(@template(type: @options.type))

    return this
</code></pre>

<p>The Item View is a bit trickier because it contained the select handling for when an item was clicked. To be able to reuse the handling, I had to make the load methods consistently named loadChildren as shown below.</p>

<pre><code class="coffeescript">class Trackbone.Models.Project extends Backbone.Model
  paramRoot: 'project'

  defaults:
    name: null

  loadChildren: -&gt;
    @children = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});

class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: '/projects'
</code></pre>

<p>One thing to point out in the Item View base class is that I believe I could have used the <a href="http://coffeescript.org/#fat_arrow">fat arrow</a> to retain the correct context.</p>

<pre><code class="coffeescript">Trackbone.Views.Projects ||= {}

class Trackbone.Views.ItemView extends Backbone.View
  template: JST["backbone/templates/item"]

  events:
    "click .select" : "select"
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  select: () -&gt;
    if @model.loadChildren
      window.toggleSelected(@el)
      @model.loadChildren()
      do (@model, @renderChildren) -&gt;
        @model.children.fetch(
          success: @renderChildren(@model.children)
        )
        @model.children.fetch()

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    $(@el).html(@template(@model.toJSON() ))
    return this
</code></pre>

<p>Now the actual Project view only had to define how to render it&rsquo;s children.</p>

<pre><code class="coffeescript">#= require ../item_view

Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.ProjectView extends Trackbone.Views.ItemView
  template: JST["backbone/templates/item"]

  renderChildren: (children) -&gt;
    featuresView = new Trackbone.Views.Features.IndexView(items: children)
    $("#list-features").html(featuresView.render().el)

    # We should probably only render this once instead of each load
    newFeaturesView = new Trackbone.Views.NewView(collection: children, type: "Features")
    $("#new-features").html(newFeaturesView.render().el)

    $("#list-bugs").html('')
    $("#new-bugs").html('')
</code></pre>

<p>Again, here&rsquo;s the <a href="http://young-flower-9677.herokuapp.com/%22>demo&lt;/a>%20and%20&lt;a%20href=%22https://github.com/skalb/trackbone/tree/version2&#8221;>source</a>.</p>

<p>I think this is a big improvement over the first version, though it&rsquo;s not quite as good as it could be. Having the loadChildren logic in the views doesn&rsquo;t really make sense, but I&rsquo;m leaving those changes for when I implement permalinks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to (Easily) Handle Model Relationships in Rails and Backbone.js]]></title>
    <link href="http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js/"/>
    <updated>2012-04-23T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/23/how-to-easily-handle-model-relationships-in-rails-and-backbone-js</id>
    <content type="html"><![CDATA[<p>While playing around with Backbone.js, I couldn&rsquo;t find an easy way to build an app that used the RESTful hierarchy of my models. I think <a href="http://spinejs.com/docs/relations">Spine&rsquo;s</a> implementation is fairly straightforward.</p>

<p>I did find a relevant <a href="https://github.com/PaulUithol/Backbone-relational">active project</a>, but for my specific case the added complexity of an additional component and dependency didn&rsquo;t seem justified. Rails already does the hard part for me, I just need Backbone to call the correct Urls.</p>

<p>I wanted to learn more about Backbone, so I prototyped a very basic project management app using Rails and Backbone called Trackbone that I&rsquo;ll walk through in this post.</p>

<!--more-->


<p>Briefly, this is a single page three panel app with drill-downs:</p>

<ul>
    <li>Many projects</li>
    <li>Project has many Features</li>
    <li>Featurehas many Bugs</li>
</ul>


<p><a href="http://young-flower-9677.herokuapp.com/">Demo on Heroku</a>
<a href="https://github.com/skalb/trackbone/tree/version1">Source</a></p>

<p><strong>Rails backend:</strong></p>

<p>Rails controllers provide the REST API for our Backbone app. I haven&rsquo;t inlined them here since they only have a few modifications post-scaffolding, but you can view them <a href="https://github.com/skalb/trackbone/tree/version1/app/controllers">here</a></p>

<p>Modifications:</p>

<ul>
<li>Projects#index is moved to HomeController</li>
<li>Location is not returned in response after #create</li>
<li>Model is returned after #update</li>
</ul>


<pre><code class="ruby routes.rb">root :to =&gt; "home#index"

Trackbone::Application.routes.draw do
  resources :projects do
    resources :features do
      resources :bugs
    end
  end
end
</code></pre>

<p>For setting up Backbone, the rails-backbone gem provides a good <a href="https://github.com/codebrew/backbone-rails/blob/master/README.md">guide</a>.</p>

<p>Originally, I scaffolded Backbone here as well. On review, I&rsquo;m not sure I would do that again. I think you&rsquo;ll end at a better design if you start from scratch.</p>

<p><strong>Creating Backbone Models:</strong></p>

<p>Features only exist in the context of a Project, so they should only be loaded for a specific Project and similarly for Bugs.</p>

<pre><code class="coffeescript javascripts/backbone/models/project.js.coffee">class Trackbone.Models.Project extends Backbone.Model
  paramRoot: 'project'

  defaults:
    name: null

  loadFeatures: -&gt;
    @features = new Trackbone.Collections.FeaturesCollection([], {project_url: @url()});

class Trackbone.Collections.ProjectsCollection extends Backbone.Collection
  model: Trackbone.Models.Project
  url: '/projects'
</code></pre>

<p>On reflection, loadFeatures is poorly named. It&rsquo;s really more of an &lsquo;initialize&rsquo;, but anyways, calling that method will create a FeaturesCollection and pass in the Url for this project. You can see how this is used in the Features model</p>

<pre><code class="coffeescript javascripts/backbone/models/feature.js.coffee">class Trackbone.Models.Feature extends Backbone.Model
  paramRoot: 'feature'

  defaults:
    name: null

  loadBugs: -&gt;
    @bugs = new Trackbone.Collections.BugsCollection([], {feature_url: @url()});

class Trackbone.Collections.FeaturesCollection extends Backbone.Collection
  model: Trackbone.Models.Feature
  initialize: (model, args) -&gt;
    @url = -&gt;
      args.project_url + "/features"
</code></pre>

<p>Using the project_url from args will prepend all RESTful requests made on the features model with projects/:project_id.</p>

<pre><code class="coffeescript javascripts/backbone/models/bug.js.coffee">class Trackbone.Models.Bug extends Backbone.Model
  paramRoot: 'bug'

  defaults:
    name: null

class Trackbone.Collections.BugsCollection extends Backbone.Collection
  model: Trackbone.Models.Bug
  initialize: (model, args) -&gt;
    @url = -&gt;
      args.feature_url + "/bugs"
</code></pre>

<p><strong>Backbone Routers:</strong></p>

<p>Next we need to create the Projects router which will be the entry point into our single page app.</p>

<pre><code class="coffeescript javascripts/backbone/routers/projects_router.js.coffee">class Trackbone.Routers.ProjectsRouter extends Backbone.Router
  initialize: (options) -&gt;
    @projects = new Trackbone.Collections.ProjectsCollection()
    @projects.reset options.projects

  routes:
    ".*" : "index"

  index: -&gt;
    @view = new Trackbone.Views.Projects.IndexView(projects: @projects)
    $("#list-projects").html(@view.render().el)

    @newProjectView = new Trackbone.Views.Projects.NewView(collection: @projects)
    $("#new-projects").html(@newProjectView.render().el)
</code></pre>

<p>Because we&rsquo;re not worrying about permalinks (yet! I&rsquo;ve started looking into this, and hope to create a follow-up post), we only need one catch-all route. We then pass in the respective models to our views.</p>

<p><strong>Listing projects:</strong></p>

<p>&#8220;` html views/projects/index.html.erb</p>

<h1>Trackbone</h1>


<hr>


<div class="container">
  <div id="new-projects"></div>
  <div id="list-projects"></div>
</div>


<div class="container">
  <div id="new-features"></div>
  <div id="list-features"></div>
</div>


<div class="container">
  <div id="new-bugs"></div>
  <div id="list-bugs"></div>
</div>




<script type="text/javascript">
  $(function() {
    window.router = new Trackbone.Routers.ProjectsRouter(
      { projects: <%= @projects.to_json.html_safe -%> }
    );
    Backbone.history.start();
  });
</script>


<p>&#8220;`</p>

<p>There is a container, new, and list div for each model. Backbone will load data from our Rest API, build HTML using the Views and Templates and inject that HTML into those DIV elements. Note that we are passing in projects from Rails to the router. This allows us to grab data from the server when the page is first requested and save an additional call on page load. Since this is a single page app, this is the only Rails view we need.</p>

<p>To display our Project data we need three templates: index to list projects, project for a specific item, and new to create a project.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;td>&lt;a href="#" class="select">&lt;%= name %>&lt;/td>
</span><span class='line'>&lt;td>&lt;a href="#%22%20class=%22destroy">Destroy&lt;/a>&lt;/td></span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>Listing projects&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;table id="projects-table">
</span><span class='line'>  &lt;tr>
</span><span class='line'>    &lt;th>Name&lt;/th>
</span><span class='line'>    &lt;th>&lt;/th>
</span><span class='line'>  &lt;/tr>
</span><span class='line'>&lt;/table>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;br/></span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>New project&lt;/h1>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;form id="new-project" name="project">
</span><span class='line'>  &lt;div class="field">
</span><span class='line'>    &lt;label for="name"> name:&lt;/label>
</span><span class='line'>    &lt;input type="text" name="name" id="name" value="&lt;%= name %>&ldquo; >
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &lt;div class="actions">
</span><span class='line'>    &lt;input type="submit" value="Create Project" />
</span><span class='line'>  &lt;/div>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/form></span></code></pre></td></tr></table></div></figure></p>

<p>These should be fairly self-explanatory. Each template will also need a Backbone View as well.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/index_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.IndexView extends Backbone.View
  template: JST["backbone/templates/projects/index"]

  initialize: () -&gt;
    @options.projects.bind('reset', @addAll)
    @options.projects.bind('sync', @render)

  addAll: () =&gt;
    @options.projects.each(@addOne)

  addOne: (project) =&gt;
    view = new Trackbone.Views.Projects.ProjectView({model : project})
    @$("tbody").append(view.render().el)

  render: =&gt;
    $(@el).html(@template(projects: @options.projects.toJSON()))
    @addAll()

    return this
</code></pre>

<p>This view receives the entire list of projects, renders the index view and appends a project view for each project.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/new_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.NewView extends Backbone.View
  template: JST["backbone/templates/projects/new"]

  events:
    "submit #new-project": "save"

  save: (e) -&gt;
    e.preventDefault()
    e.stopPropagation()

    name = $("#new-project #name").val()
    if name
      $("#new-project #name").val('')
      @collection.create(name: name)

  render: -&gt;
    $(@el).html(@template())

    return this
</code></pre>

<p>The new view simply providers a handler for creating a new project within the collection. The create method actually does three things: creates the model, POSTs the model to the server, and adds the model to the collection.</p>

<pre><code class="coffeescript javascripts/backbone/views/projects/project_view.js.coffee">Trackbone.Views.Projects ||= {}

class Trackbone.Views.Projects.ProjectView extends Backbone.View
  template: JST["backbone/templates/shared/item"]

  events:
    "click .select" : "select"
    "click .destroy" : "destroy"

  tagName: "tr"
  className: "item"

  select: () -&gt;
    window.toggleSelected(@el)
    @model.loadFeatures()
    do (@model) -&gt;
      @model.features.fetch success: -&gt;
        featuresView = new Trackbone.Views.Features.IndexView(features: @model.features)
        $("#list-features").html(featuresView.render().el)

        # We should probably only render this once instead of each load
        newFeaturesView = new Trackbone.Views.Features.NewView(collection: @model.features)
        $("#new-features").html(newFeaturesView.render().el)

        $("#list-bugs").html('')
        $("#new-bugs").html('')
    @model.features.fetch()

  destroy: () -&gt;
    @model.destroy()
    this.remove()

    return false

  render: -&gt;
    $(@el).html(@template(@model.toJSON() ))
    return this
</code></pre>

<p>This view is really the heart of the app. Every time a Project is selected, we&rsquo;ll display the Features for that Project by calling fetch() and binding to success().</p>

<p>I&rsquo;m not going to inline the templates and views for Features and Bugs since they are more or less identical, but feel free to browse through all the <a href="https://github.com/skalb/trackbone/tree/version1/app/assets/javascripts/backbone">client side code</a></p>

<p>Again, here&rsquo;s a working <a href="http://young-flower-9677.herokuapp.com/">demo</a>.</p>

<p>Please provide any feedback you have in the comments. Was this useful? Too long? Too much/too little code inline? I&rsquo;m currently working on a couple more entires that will build on this one as I&rsquo;m learning more about Backbone.js, so feedback is definitely useful.</p>
]]></content>
  </entry>
  
</feed>
