<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sinon | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/sinon/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
  <updated>2015-01-31T18:56:54-08:00</updated>
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Sinon Spys With Meteor Collections]]></title>
    <link href="http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections/"/>
    <updated>2012-08-25T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections</id>
    <content type="html"><![CDATA[<p>Following my testing described <a href="http://www.skalb.com/2012/08/19/testing-backbone-routers-in-meteor-with-mocha/">here</a>, I wanted to verify that Meteor interacts with my Routers correctly.</p>

<!--more-->


<p>The Meteor.Collection object exposes methods for querying the MongoDB collection as described in the docs. I want to test if my index callback will retrieve all the items it should.</p>

<p>Add the new module we need:</p>

<pre><code class="bash">npm install sinon
</code></pre>

<p>Here&rsquo;s how to use the spy:</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">items =
  find: sinon.spy()
</code></pre>

<p>Now, let&rsquo;s write our test:</p>

<pre><code class="coffeescript tests/sample_router_factory_test.coffee">it "should retrieve all items", -&gt;
  router.navigate('', true)
  items.find.called.should.equal true
</code></pre>

<p>This will fail, since we need to first modify our Router to accept a collection as an argument and then call find on it.</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">root = exports ? this

class SampleRouterFactory
  constructor: (@Backbone, @Items) -&gt;

  getRouter: () -&gt;
    SampleRouter = @Backbone.Router.extend(
      routes:
        "": "index"

      index: =&gt;
        items = @Items.find()
    )
    new SampleRouter

root.SampleRouterFactory = SampleRouterFactory
</code></pre>

<p>This <em>should</em> pass, but yet doesn&rsquo;t. Why? Thinking about the assumption our test is making when using the a Backbone router, it likely depends on Backbone initialization. We can try this in our test, also:</p>

<pre><code class="coffeescript">Backbone.history.start
  silent: true
  pushState: true
</code></pre>

<p>This doesn&rsquo;t work either because Backbone assumes we are in the browser when accessing <strong>window</strong>. I&rsquo;m pretty sure this is not the approach I want. We don&rsquo;t need to add a dependency on Backbone&rsquo;s internal behavior to test a method of my Router. My previous test verifies that the root path will call an index method, so now I only need to call that index method and validate that behavior. This has the added benefit of simplifying the test.</p>

<p>Here&rsquo;s the final version of my tests:</p>

<pre><code class="coffeescript tests/sample_router_factory_test.coffee">util = require('util')
should = require('should')
Backbone = require('backbone')
sinon = require('sinon')
SampleRouterFactory = require('../client/lib/sample_router_factory').SampleRouterFactory

describe "SampleRouter", -&gt;
  items =
    find: sinon.spy()

  factory = new SampleRouterFactory(Backbone, items)
  router = factory.getRouter(Backbone)

  it "should have an index route", -&gt;
    router.routes[''].should.equal('index')

  it "should retrieve all items when navigating to index", -&gt;
    router.index()
    items.find.called.should.equal true
</code></pre>

<p>A bit roundabout, but in the end what I was trying to accomplish. Source <a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">here</a>.</p>
]]></content>
  </entry>
  
</feed>
