<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mocha | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/mocha/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
  <updated>2013-07-05T21:39:19-07:00</updated>
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Sinon Spys with Meteor Collections]]></title>
    <link href="http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections/"/>
    <updated>2012-08-25T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections</id>
    <content type="html"><![CDATA[<p>Following my testing described <a title="Testing Backbone Routers in Meteor with Mocha" href="http://www.skalb.com/2012/08/19/testing-backbone-routers-in-meteor-with-mocha/">here</a>, I wanted to verify that Meteor interacts with my Routers correctly.</p>

<!--more-->


<p>The Meteor.Collection object exposes methods for querying the MongoDB collection as described in the docs. I want to test if my index callback will retrieve all the items it should.</p>

<p>Add the new module we need:</p>

<p><code>bash
npm install sinon
</code></p>

<p>Here's how to use the spy:</p>

<p><code>coffeescript lib/sample_router_factory.coffee
items =
  find: sinon.spy()
</code></p>

<p>Now, let's write our test:</p>

<p><code>coffeescript tests/sample_router_factory_test.coffee
it "should retrieve all items", -&gt;
  router.navigate('', true)
  items.find.called.should.equal true
</code></p>

<p>This will fail, since we need to first modify our Router to accept a collection as an argument and then call find on it.</p>

<p>``` coffeescript lib/sample_router_factory.coffee
root = exports ? this</p>

<p>class SampleRouterFactory
  constructor: (@Backbone, @Items) -></p>

<p>  getRouter: () -></p>

<pre><code>SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: =&gt;
    items = @Items.find()
)
new SampleRouter
</code></pre>

<p>root.SampleRouterFactory = SampleRouterFactory
```</p>

<p>This <em>should</em> pass, but yet doesn't. Why? Thinking about the assumption our test is making when using the a Backbone router, it likely depends on Backbone initialization. We can try this in our test, also:</p>

<p><code>coffeescript
Backbone.history.start
  silent: true
  pushState: true
</code></p>

<p>This doesn't work either because Backbone assumes we are in the browser when accessing <strong>window</strong>. I'm pretty sure this is not the approach I want. We don't need to add a dependency on Backbone's internal behavior to test a method of my Router. My previous test verifies that the root path will call an index method, so now I only need to call that index method and validate that behavior. This has the added benefit of simplifying the test.</p>

<p>Here's the final version of my tests:</p>

<p>``` coffeescript tests/sample_router_factory_test.coffee
util = require('util')
should = require('should')
Backbone = require('backbone')
sinon = require('sinon')
SampleRouterFactory = require('../client/lib/sample_router_factory').SampleRouterFactory</p>

<p>describe "SampleRouter", ->
  items =</p>

<pre><code>find: sinon.spy()
</code></pre>

<p>  factory = new SampleRouterFactory(Backbone, items)
  router = factory.getRouter(Backbone)</p>

<p>  it "should have an index route", -></p>

<pre><code>router.routes[''].should.equal('index')
</code></pre>

<p>  it "should retrieve all items when navigating to index", -></p>

<pre><code>router.index()
items.find.called.should.equal true
</code></pre>

<p>```</p>

<p>A bit roundabout, but in the end what I was trying to accomplish. Source <a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Backbone Routers in Meteor with Mocha]]></title>
    <link href="http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha/"/>
    <updated>2012-08-20T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha</id>
    <content type="html"><![CDATA[<p>One of the downsides of Meteor and perhaps strongest complaint is that it doesn't play nicely with existing NodeJS modules. You're forced to use the available SmartPackages (or build one). This is a problem since the Mocha environment runs without the browser and doesn't have access to the libraries included by the SmartPackage.</p>

<!--more-->


<p><em>Here's a previous <a title="Testing with Meteor, CoffeeScript and Mocha" href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/">post</a> describing how to setup everything</em></p>

<p>Creating the project:</p>

<p><code>bash
meteor create mocha-router
meteor add backbone
meteor add coffeescript
cd mocha-router
mkdir client
mkdir server
mkdir tests
cd tests
mkdir lib
</code></p>

<p>When I first installed the modules, I installed them in my project root, but this caused Meteor to try to load them in the both the client/server environment which crashed the Meteor server. Luckily, Meteor will ignore anything in the tests folder so we can install the necessary modules there.</p>

<p><code>bash
npm install should
npm install backbone
mocha *.coffee --compilers coffee:coffee-script
</code></p>

<p>My goal was to create a very basic Backbone router test. Normally, I'd define the router like so:</p>

<p>``` coffeescript
SampleRouter = @Backbone.Router.extend(
  routes:</p>

<pre><code>"": "index"
</code></pre>

<p>  index: ->
)
new SampleRouter
```</p>

<p>This won't work when running the Mocha tests because it assumes the Meteor framework is present to load Backbone. I solved this by creating a factory for the router and injecting the Backbone module.</p>

<p>Note, I need to put this module in tests/lib so Meteor will make sure to load it first</p>

<p>lib/sample_router_factory.coffee:
``` coffeescript
root = exports ? this</p>

<p>class SampleRouterFactory
  constructor: (@Backbone) -></p>

<p>  getRouter: () -></p>

<pre><code>SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: -&gt;
    Session.set "test", "test"
)
new SampleRouter
</code></pre>

<p>root.SampleRouterFactory = SampleRouterFactory
```</p>

<p>Exports is a global object accessible in the nodeJS environment that Mocha runs in. See this <a href="http://visionmedia.github.com/masteringnode/book.html">ebook</a> for more details.</p>

<p>This module will now create a class that will return a new instance of the SampleRouter.</p>

<p>Now, let's look at the test case:</p>

<p>tests/sample_router_factory_test.coffee
``` coffeescript
should = require('should')
Backbone = require('backbone')
SampleRouterFactory = require('../client/lib/sample_router_factory').SampleRouterFactory</p>

<p>describe "SampleRouter", ->
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
  it "should have an index router", -></p>

<pre><code>router.routes[''].should.equal('index')
</code></pre>

<p>```</p>

<p>Lastly, in the actual Meteor app I create the app a similar way:</p>

<p>mocha-router.coffee
<code>coffeescript
Meteor.startup -&gt;
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
</code></p>

<p>Again, there's no need to require either Backbone (loaded as a SmartPackage) or the actual SampleRouterFactory because Meteor treats all of your CoffeeScript files as a single file and consequently scope.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">Source code here.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing with Meteor, CoffeeScript and Mocha]]></title>
    <link href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/"/>
    <updated>2012-08-19T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Despite no mention in the official <a href="http://docs.meteor.com/">Meteor docs</a>, adding unit tests is fairly easy. For some reason, they don't mention this but any files in the tests/ folder will be ignored by the Meteor server.</p>

<!--more-->


<p>What you'll need:</p>

<ul>
    <li><a href="https://github.com/meteor/meteor">Meteor</a></li>
    <li><a href="https://github.com/isaacs/npm">Npm</a></li>
    <li><a href="https://github.com/visionmedia/mocha">Mocha</a></li>
</ul>


<div>Optional:</div>


<div>
<ul>
    <li><a href="http://growl.info/">Growl</a> (for notifications from mocha watch)</li>
</ul>
</div>


<div>Getting everything running:</div>


<p><code>bash
meteor create mocha
cd mocha
meteor add coffeescript
</code></p>

<p>Setting up Mocha to watch our coffee files and send Growl notifications:</p>

<p>``` bash</p>

<p>mocha tests/*.coffee -w -G --compilers coffee:coffee-script</p>

<p>```</p>

<p>Now to create a sample test:</p>

<p>``` coffeescript test.coffee
describe "Array", ->
  describe "#indexOf()", -></p>

<pre><code>it "should return -1 when the value is not present", -&gt;
  assert.equal -1, [1, 2, 3].indexOf(1)
  assert.equal -1, [1, 2, 3].indexOf(0)
</code></pre>

<p>```</p>

<p>Mocha should notice the file change and run the tests showing you the passing test.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha">Source code here.</a></p>

<p>Some notes:</p>

<ul>
    <li>The growl notification didn't work for me, but I assume that's because I'm using an old version.</li>
    <li>When using Mocha watch, sometimes a failing test result would be outputted many times</li>
    <li><a href="https://github.com/pivotal/jasmine">Jasmine</a> should also work fine</li>
</ul>

]]></content>
  </entry>
  
</feed>
