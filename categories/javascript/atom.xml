<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
  <updated>2015-01-31T19:03:44-08:00</updated>
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simpleshop: Pure JavaScript Photo Editing]]></title>
    <link href="http://www.skalb.com/2013/07/04/simpleshop-pure-javascript-photo-editing/"/>
    <updated>2013-07-04T17:00:00-07:00</updated>
    <id>http://www.skalb.com/2013/07/04/simpleshop-pure-javascript-photo-editing</id>
    <content type="html"><![CDATA[<p>Even as a developer, it amazes me what you can build with no (at least required) knowledge of anything beyond javascript and Heroku.</p>

<p><a href="http://simpleshop.heroku.com/">Simpleshop</a></p>

<p><a href="https://github.com/skalb/simpleshop">Source</a></p>

<!--more-->


<p>Built using:</p>

<ul>
<li>nodeJS/Heroku</li>
<li>Filepicker.io</li>
<li>Aviary</li>
</ul>


<p>Then again, they do say <a href="http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html">javascript</a> is <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html">eating</a> the world, in so many words.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Side Airport Autocomplete Using NodeJS]]></title>
    <link href="http://www.skalb.com/2013/04/23/server-side-auto-complete-using-nodejs/"/>
    <updated>2013-04-23T15:47:00-07:00</updated>
    <id>http://www.skalb.com/2013/04/23/server-side-auto-complete-using-nodejs</id>
    <content type="html"><![CDATA[<p>This post shows how to enable autocomplete on a web form that consumes a JSON api running on nodeJS.</p>

<p><a href="http://airport-autocomplete.herokuapp.com/">Example</a></p>

<p><a href="https://github.com/skalb/airport-autocomplete">Source</a></p>

<!--more-->


<p>To enable the autocomplete, we need two main components to the app:</p>

<ul>
<li><a href="http://jqueryui.com/autocomplete/">jQueryUI autocomplete</a></li>
<li><a href="https://github.com/marccampbell/node-autocomplete">node-autocomplete</a></li>
</ul>


<p>The easiest way to add jQueryUI is to include a reference in our layout:</p>

<pre><code class="html layout.jade">!!!
html
  head
    title= title
    link(rel='stylesheet', href='http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css')
    link(rel='stylesheet', href='http://www.skalb.com/stylesheets/style.css')
    script(src='http://code.jquery.com/jquery-1.8.3.min.js')
    script(src='http://code.jquery.com/ui/1.9.2/jquery-ui.min.js')
    script(src='http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.3/underscore-min.js ')
    script(src='/javascripts/index.js')
  body!= body
</code></pre>

<p>node-autocomplete and other necessary libraries can be added to package.json. Note: I&rsquo;m required to use older verions of some packages because Heroku does not support the latest version of Express.</p>

<pre><code class="json package.json">{
  "name": "airport-autocomplete",
  "version": "0.0.1",
  "dependencies": {
    "express": "2.5.x",
    "jade": "*",
    "autocomplete": "*",
    "underscore": "*",
    "jquery": "*"
  },
  "engines": {
    "node": "0.8.x",
    "npm": "1.1.x"
  }
}
</code></pre>

<p>The dataset for this example is going to be airports and their codes. I wanted to be able to intelligently handle for the case where the user enters either the airport code or the name since most travel sites operate this way.</p>

<p><a href="/assets/airports.dat">Airports.dat</a> - format name|code</p>

<p>We need to keep lookups in memory to present the user with the properly capitalized airport name. During the actual autocomplete search, we will only use lowercased entries and input. Therefore, we need to keep track of three things:</p>

<ul>
<li>The actual autocomplete object where we load both codes and names into</li>
<li>One lookup to retrieve the full name from the code</li>
<li>Another lookup to retrieve the full name from a lowercased airport name</li>
</ul>


<pre><code class="javascript routes/index.js">fs.readFile('data/airport-codes.dat', function(err, data) {
  var airports = [];

  _.each(data.toString().split('\n'), function(a) {
    var parts = a.trim().split("|"),
        airportName = parts[0],
        airportNameLower = airportName.toLowerCase(),
        airportCode = parts[1];
        airportCodeLower = airportCode.toLowerCase(),
        fullName = airportCode + " - " + airportName;

    airportNames[airportNameLower] = fullName;
    airportCodes[airportCodeLower] = fullName;

    airports.push(airportNameLower);
    airports.push(airportCodeLower);
  });

  namesAC.initialize(function(onReady) {
    onReady(airports);
  });
});
</code></pre>

<p>In the nodeJS route that returns the airport data, we&rsquo;ll use the input to test if it matched either an airport name or an aiport code and return those results.</p>

<pre><code class="javascript routes/index.js">exports.airports = function(req, res) {
  var airport = req.query["term"].toLowerCase(),
      results = namesAC.search(airport);

  var airportResults = _.map(results, function(a) {
    return airportNames[a] || airportCodes[a];
  });

  res.send(airportResults);
};
</code></pre>

<p>Here&rsquo;s what a <a href="http://airport-autocomplete.herokuapp.com/airports?term=RIO">sample request</a> for RIO would return:</p>

<pre><code class="json">[
    "RBR - Rio Branco, AC, Brazil",
    "RCU - Rio Cuarto, CD, Argentina",
    "GIG - Rio De Janeiro, RJ, Brazil",
    "RGL - Rio Gallegos, Argentina - Internacional",
    "RIG - Rio Grande, RS, Brazil",
    "RGA - Rio Grande, TF, Argentina",
    "ROY - Rio Mayo, CB, Argentina",
    "RVD - Rio Verde, GO, Brazil",
    "RCH - Riohacha, Colombia"
]
</code></pre>

<p>The last part is to wire up the actual jQuery UI autocomplete. I&rsquo;ve also added a handler on the open to highlight the term from the search.</p>

<pre><code class="javascript public/javascripts/index.js">(function () {
  var termTemplate = "&lt;span class='ui-autocomplete-term'&gt;$1&lt;/span&gt;";

  $(document).ready(function() {
    $("#origin").autocomplete({
      source: "/airports",
      minLength: 2,
      open: function(e,ui) {
            var acData = $(this).data('autocomplete');
            acData
                .menu
                .element
                .find('a')
                .each(function() {
                    var me = $(this);
                    var regex = new RegExp( '(' + acData.term + ')', 'gi' );
                    me.html( me.text().replace(regex, termTemplate) );
                });
        }
    });
  });
})();
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multi-color Heat Map in JavaScript]]></title>
    <link href="http://www.skalb.com/2013/01/20/multi-color-heat-map-in-javascript/"/>
    <updated>2013-01-20T00:00:00-08:00</updated>
    <id>http://www.skalb.com/2013/01/20/multi-color-heat-map-in-javascript</id>
    <content type="html"><![CDATA[<p>While working on my <a href="http://flightgrid.herokuapp.com/">flight grid site</a>, I was looking for a way to add a multi-color heat map.</p>

<p>I found the following <a href="http://www.designchemical.com/blog/index.php/jquery/jquery-tutorial-create-a-flexible-data-heat-map/">example</a>, but for just one color.</p>

<p>I modified it to work for two colors as shown below (warning messy code!):</p>

<!--more-->


<p>&#8220;` javascript</p>

<script type="text/JavaScript">
$(document).ready(function(){
    // Function to get the Max value in Array
    Array.max = function( array ){
        return Math.max.apply( Math, array );
    };

    // get all values
    var counts= $('#heat-map-3 tbody td').not('.stats-title').map(function() {
        return parseInt($(this).text());
    }).get();

    // return max value
    var max = Array.max(counts),
      middle = max * 1.0 / 2;

    // add classes to cells based on nearest 10 value
    $('#heat-map-3 tbody td').not('.stats-title').each(function(){
        var val = parseInt($(this).text());
    if (val < middle) {
      var pos = parseInt(Math.round((val/middle)*100)).toFixed(0);
        relative = parseInt(pos / 100.0 * 225).toFixed(0);
        clr = 'rgb('+relative+','+255+','+relative+')';
        $(this).css({backgroundColor:clr});
    }
    else {
      var pos = parseInt(100 - Math.round(((val-middle)/(max-middle))*100)).toFixed(0);
      relative = parseInt(pos / 100.0 * 225).toFixed(0);
      clr = 'rgb('+255+','+relative+','+relative+')';
      $(this).css({backgroundColor:clr});
    }
    });
});
</script>


<p>&#8220;`</p>

<p>Here&rsquo;s a working <a href="http://www.skalb.com/assets/jquery-data-heat-map.html">example</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Sinon Spys With Meteor Collections]]></title>
    <link href="http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections/"/>
    <updated>2012-08-25T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections</id>
    <content type="html"><![CDATA[<p>Following my testing described <a href="http://www.skalb.com/2012/08/19/testing-backbone-routers-in-meteor-with-mocha/">here</a>, I wanted to verify that Meteor interacts with my Routers correctly.</p>

<!--more-->


<p>The Meteor.Collection object exposes methods for querying the MongoDB collection as described in the docs. I want to test if my index callback will retrieve all the items it should.</p>

<p>Add the new module we need:</p>

<pre><code class="bash">npm install sinon
</code></pre>

<p>Here&rsquo;s how to use the spy:</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">items =
  find: sinon.spy()
</code></pre>

<p>Now, let&rsquo;s write our test:</p>

<pre><code class="coffeescript tests/sample_router_factory_test.coffee">it "should retrieve all items", -&gt;
  router.navigate('', true)
  items.find.called.should.equal true
</code></pre>

<p>This will fail, since we need to first modify our Router to accept a collection as an argument and then call find on it.</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">root = exports ? this

class SampleRouterFactory
  constructor: (@Backbone, @Items) -&gt;

  getRouter: () -&gt;
    SampleRouter = @Backbone.Router.extend(
      routes:
        "": "index"

      index: =&gt;
        items = @Items.find()
    )
    new SampleRouter

root.SampleRouterFactory = SampleRouterFactory
</code></pre>

<p>This <em>should</em> pass, but yet doesn&rsquo;t. Why? Thinking about the assumption our test is making when using the a Backbone router, it likely depends on Backbone initialization. We can try this in our test, also:</p>

<pre><code class="coffeescript">Backbone.history.start
  silent: true
  pushState: true
</code></pre>

<p>This doesn&rsquo;t work either because Backbone assumes we are in the browser when accessing <strong>window</strong>. I&rsquo;m pretty sure this is not the approach I want. We don&rsquo;t need to add a dependency on Backbone&rsquo;s internal behavior to test a method of my Router. My previous test verifies that the root path will call an index method, so now I only need to call that index method and validate that behavior. This has the added benefit of simplifying the test.</p>

<p>Here&rsquo;s the final version of my tests:</p>

<pre><code class="coffeescript tests/sample_router_factory_test.coffee">util = require('util')
should = require('should')
Backbone = require('backbone')
sinon = require('sinon')
SampleRouterFactory = require('../client/lib/sample_router_factory').SampleRouterFactory

describe "SampleRouter", -&gt;
  items =
    find: sinon.spy()

  factory = new SampleRouterFactory(Backbone, items)
  router = factory.getRouter(Backbone)

  it "should have an index route", -&gt;
    router.routes[''].should.equal('index')

  it "should retrieve all items when navigating to index", -&gt;
    router.index()
    items.find.called.should.equal true
</code></pre>

<p>A bit roundabout, but in the end what I was trying to accomplish. Source <a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing With Meteor, CoffeeScript and Mocha]]></title>
    <link href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/"/>
    <updated>2012-08-19T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Adding unit tests is straightforward in <a href="http://docs.meteor.com/#structuringyourapp">Meteor</a>. Any files in the tests/ folder will be ignored by the Meteor server.</p>

<!--more-->


<p>What you&rsquo;ll need:</p>

<ul>
<li><a href="https://github.com/meteor/meteor">Meteor</a></li>
<li><a href="https://github.com/isaacs/npm">Npm</a></li>
<li><a href="https://github.com/visionmedia/mocha">Mocha</a></li>
</ul>


<p>Optional: <a href="http://growl.info/">Growl</a> (for notifications from mocha watch)</p>

<p>Getting everything running:</p>

<pre><code class="bash">meteor create mocha
cd mocha
meteor add coffeescript
</code></pre>

<p>Setting up Mocha to watch our coffee files and send Growl notifications:</p>

<pre><code class="bash">
mocha tests/*.coffee -w -G --compilers coffee:coffee-script
</code></pre>

<p>Now to create a sample test:</p>

<pre><code class="coffeescript test.coffee">describe "Array", -&gt;
  describe "#indexOf()", -&gt;
    it "should return -1 when the value is not present", -&gt;
      assert.equal -1, [1, 2, 3].indexOf(1)
      assert.equal -1, [1, 2, 3].indexOf(0)
</code></pre>

<p>Mocha should notice the file change and run the tests showing you the passing test.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha">Source code here.</a></p>

<p>Some notes:
- The growl notification didn&rsquo;t work for me, but I assume that&rsquo;s because I&rsquo;m using an old version.
- When using Mocha watch, sometimes a failing test result would be outputted many times
- <a href="https://github.com/pivotal/jasmine">Jasmine</a> should also work fine</p>
]]></content>
  </entry>
  
</feed>
