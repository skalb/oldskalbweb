<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Meteor | skalb.com]]></title>
  <link href="http://www.skalb.com/categories/meteor/atom.xml" rel="self"/>
  <link href="http://www.skalb.com/"/>
<<<<<<< HEAD
  <updated>2015-01-31T14:16:33-08:00</updated>
=======
  <updated>2014-07-13T14:55:20-07:00</updated>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
  <id>http://www.skalb.com/</id>
  <author>
    <name><![CDATA[Sameer Kalburgi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Using Sinon Spys With Meteor Collections]]></title>
=======
    <title type="html"><![CDATA[Using Sinon Spys with Meteor Collections]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections/"/>
    <updated>2012-08-25T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/25/using-sinon-spys-with-meteor-collections</id>
    <content type="html"><![CDATA[<p>Following my testing described <a href="http://www.skalb.com/2012/08/19/testing-backbone-routers-in-meteor-with-mocha/">here</a>, I wanted to verify that Meteor interacts with my Routers correctly.</p>

<!--more-->


<p>The Meteor.Collection object exposes methods for querying the MongoDB collection as described in the docs. I want to test if my index callback will retrieve all the items it should.</p>

<p>Add the new module we need:</p>

<<<<<<< HEAD
<pre><code class="bash">npm install sinon
</code></pre>

<p>Here&rsquo;s how to use the spy:</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">items =
  find: sinon.spy()
</code></pre>

<p>Now, let&rsquo;s write our test:</p>

<pre><code class="coffeescript tests/sample_router_factory_test.coffee">it "should retrieve all items", -&gt;
  router.navigate('', true)
  items.find.called.should.equal true
</code></pre>

<p>This will fail, since we need to first modify our Router to accept a collection as an argument and then call find on it.</p>

<pre><code class="coffeescript lib/sample_router_factory.coffee">root = exports ? this

class SampleRouterFactory
  constructor: (@Backbone, @Items) -&gt;

  getRouter: () -&gt;
    SampleRouter = @Backbone.Router.extend(
      routes:
        "": "index"

      index: =&gt;
        items = @Items.find()
    )
    new SampleRouter

root.SampleRouterFactory = SampleRouterFactory
</code></pre>

<p>This <em>should</em> pass, but yet doesn&rsquo;t. Why? Thinking about the assumption our test is making when using the a Backbone router, it likely depends on Backbone initialization. We can try this in our test, also:</p>

<pre><code class="coffeescript">Backbone.history.start
  silent: true
  pushState: true
</code></pre>
=======
<p><code>bash
npm install sinon
</code></p>

<p>Here&rsquo;s how to use the spy:</p>

<p><code>coffeescript lib/sample_router_factory.coffee
items =
  find: sinon.spy()
</code></p>

<p>Now, let&rsquo;s write our test:</p>

<p><code>coffeescript tests/sample_router_factory_test.coffee
it "should retrieve all items", -&gt;
  router.navigate('', true)
  items.find.called.should.equal true
</code></p>

<p>This will fail, since we need to first modify our Router to accept a collection as an argument and then call find on it.</p>

<p>``` coffeescript lib/sample_router_factory.coffee
root = exports ? this</p>

<p>class SampleRouterFactory
  constructor: (@Backbone, @Items) &ndash;></p>

<p>  getRouter: () &ndash;></p>

<pre><code>SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: =&gt;
    items = @Items.find()
)
new SampleRouter
</code></pre>

<p>root.SampleRouterFactory = SampleRouterFactory
```</p>

<p>This <em>should</em> pass, but yet doesn&rsquo;t. Why? Thinking about the assumption our test is making when using the a Backbone router, it likely depends on Backbone initialization. We can try this in our test, also:</p>

<p><code>coffeescript
Backbone.history.start
  silent: true
  pushState: true
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>This doesn&rsquo;t work either because Backbone assumes we are in the browser when accessing <strong>window</strong>. I&rsquo;m pretty sure this is not the approach I want. We don&rsquo;t need to add a dependency on Backbone&rsquo;s internal behavior to test a method of my Router. My previous test verifies that the root path will call an index method, so now I only need to call that index method and validate that behavior. This has the added benefit of simplifying the test.</p>

<p>Here&rsquo;s the final version of my tests:</p>

<<<<<<< HEAD
<pre><code class="coffeescript tests/sample_router_factory_test.coffee">util = require('util')
should = require('should')
Backbone = require('backbone')
sinon = require('sinon')
SampleRouterFactory = require('../client/lib/sample_router_factory').SampleRouterFactory

describe "SampleRouter", -&gt;
  items =
    find: sinon.spy()

  factory = new SampleRouterFactory(Backbone, items)
  router = factory.getRouter(Backbone)

  it "should have an index route", -&gt;
    router.routes[''].should.equal('index')

  it "should retrieve all items when navigating to index", -&gt;
    router.index()
    items.find.called.should.equal true
</code></pre>

=======
<p>``` coffeescript tests/sample_router_factory_test.coffee
util = require(&lsquo;util&rsquo;)
should = require(&lsquo;should&rsquo;)
Backbone = require(&lsquo;backbone&rsquo;)
sinon = require(&lsquo;sinon&rsquo;)
SampleRouterFactory = require(&lsquo;../client/lib/sample_router_factory&rsquo;).SampleRouterFactory</p>

<p>describe &ldquo;SampleRouter&rdquo;, &ndash;>
  items =</p>

<pre><code>find: sinon.spy()
</code></pre>

<p>  factory = new SampleRouterFactory(Backbone, items)
  router = factory.getRouter(Backbone)</p>

<p>  it &ldquo;should have an index route&rdquo;, &ndash;></p>

<pre><code>router.routes[''].should.equal('index')
</code></pre>

<p>  it &ldquo;should retrieve all items when navigating to index&rdquo;, &ndash;></p>

<pre><code>router.index()
items.find.called.should.equal true
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>A bit roundabout, but in the end what I was trying to accomplish. Source <a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Testing Backbone Routers in Meteor With Mocha]]></title>
=======
    <title type="html"><![CDATA[Testing Backbone Routers in Meteor with Mocha]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha/"/>
    <updated>2012-08-20T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/20/testing-backbone-routers-in-meteor-with-mocha</id>
    <content type="html"><![CDATA[<p>One of the downsides of Meteor and perhaps strongest complaint is that it doesn&rsquo;t play nicely with existing NodeJS modules. You&rsquo;re forced to use the available SmartPackages (or build one). This is a problem since the Mocha environment runs without the browser and doesn&rsquo;t have access to the libraries included by the SmartPackage.</p>

<!--more-->


<p><em>Here&rsquo;s a previous <a href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/">post</a> describing how to setup everything</em></p>

<p>Creating the project:</p>

<<<<<<< HEAD
<pre><code class="bash">meteor create mocha-router
=======
<p><code>bash
meteor create mocha-router
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
meteor add backbone
meteor add coffeescript
cd mocha-router
mkdir client
mkdir server
mkdir tests
cd tests
mkdir lib
<<<<<<< HEAD
</code></pre>

<p>When I first installed the modules, I installed them in my project root, but this caused Meteor to try to load them in the both the client/server environment which crashed the Meteor server. Luckily, Meteor will ignore anything in the tests folder so we can install the necessary modules there.</p>

<pre><code class="bash">npm install should
npm install backbone
mocha *.coffee --compilers coffee:coffee-script
</code></pre>

<p>My goal was to create a very basic Backbone router test. Normally, I&rsquo;d define the router like so:</p>

<pre><code class="coffeescript">SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: -&gt;
)
new SampleRouter
</code></pre>
=======
</code></p>

<p>When I first installed the modules, I installed them in my project root, but this caused Meteor to try to load them in the both the client/server environment which crashed the Meteor server. Luckily, Meteor will ignore anything in the tests folder so we can install the necessary modules there.</p>

<p><code>bash
npm install should
npm install backbone
mocha *.coffee --compilers coffee:coffee-script
</code></p>

<p>My goal was to create a very basic Backbone router test. Normally, I&rsquo;d define the router like so:</p>

<p>``` coffeescript
SampleRouter = @Backbone.Router.extend(
  routes:</p>

<pre><code>"": "index"
</code></pre>

<p>  index: &ndash;>
)
new SampleRouter
```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>This won&rsquo;t work when running the Mocha tests because it assumes the Meteor framework is present to load Backbone. I solved this by creating a factory for the router and injecting the Backbone module.</p>

<p>Note, I need to put this module in tests/lib so Meteor will make sure to load it first</p>

<p>lib/sample_router_factory.coffee:
<<<<<<< HEAD
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">root = </span><span class="nx">exports</span> <span class="o">?</span> <span class="k">this</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nx">SampleRouterFactory</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(@Backbone) -&gt;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="nv">getRouter: </span><span class="nf">() -&gt;</span>
</span><span class='line'>    <span class="nv">SampleRouter = </span><span class="nx">@Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>      <span class="nv">routes:</span>
</span><span class='line'>        <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">index</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>  <span class="nv">index: </span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span> <span class="s">&quot;test&quot;</span><span class="p">,</span> <span class="s">&quot;test&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">new</span> <span class="nx">SampleRouter</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nv">root.SampleRouterFactory = </span><span class="nx">SampleRouterFactory</span>
</span></code></pre></td></tr></table></div></figure></p>
=======
``` coffeescript
root = exports ? this</p>

<p>class SampleRouterFactory
  constructor: (@Backbone) &ndash;></p>

<p>  getRouter: () &ndash;></p>

<pre><code>SampleRouter = @Backbone.Router.extend(
  routes:
    "": "index"

  index: -&gt;
    Session.set "test", "test"
)
new SampleRouter
</code></pre>

<p>root.SampleRouterFactory = SampleRouterFactory
```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Exports is a global object accessible in the nodeJS environment that Mocha runs in. See this <a href="http://visionmedia.github.com/masteringnode/book.html">ebook</a> for more details.</p>

<p>This module will now create a class that will return a new instance of the SampleRouter.</p>

<p>Now, let&rsquo;s look at the test case:</p>

<p>tests/sample_router_factory_test.coffee
<<<<<<< HEAD
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">should = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">should</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nv">Backbone = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">backbone</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="nv">SampleRouterFactory = </span><span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;..</span><span class="o">/</span><span class="nx">client</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">sample_router_factory</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">SampleRouterFactory</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">describe</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">SampleRouter</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">factory = </span><span class="k">new</span> <span class="nx">SampleRouterFactory</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">router = </span><span class="nx">factory</span><span class="p">.</span><span class="nx">getRouter</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">it</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">should</span> <span class="nx">have</span> <span class="nx">an</span> <span class="nx">index</span> <span class="nx">router</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">router</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;].</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">index</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></p>
=======
``` coffeescript
should = require(&lsquo;should&rsquo;)
Backbone = require(&lsquo;backbone&rsquo;)
SampleRouterFactory = require(&lsquo;../client/lib/sample_router_factory&rsquo;).SampleRouterFactory</p>

<p>describe &ldquo;SampleRouter&rdquo;, &ndash;>
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
  it &ldquo;should have an index router&rdquo;, &ndash;></p>

<pre><code>router.routes[''].should.equal('index')
</code></pre>

<p>```</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>Lastly, in the actual Meteor app I create the app a similar way:</p>

<p>mocha-router.coffee
<code>coffeescript
Meteor.startup -&gt;
  factory = new SampleRouterFactory(Backbone)
  router = factory.getRouter(Backbone)
</code></p>

<p>Again, there&rsquo;s no need to require either Backbone (loaded as a SmartPackage) or the actual SampleRouterFactory because Meteor treats all of your CoffeeScript files as a single file and consequently scope.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha-router">Source code here.</a></p>
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Testing With Meteor, CoffeeScript and Mocha]]></title>
=======
    <title type="html"><![CDATA[Testing with Meteor, CoffeeScript and Mocha]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha/"/>
    <updated>2012-08-19T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/08/19/testing-with-meteor-coffeescript-and-mocha</id>
    <content type="html"><![CDATA[<p>Adding unit tests is straightforward in <a href="http://docs.meteor.com/#structuringyourapp">Meteor</a>. Any files in the tests/ folder will be ignored by the Meteor server.</p>

<!--more-->


<p>What you&rsquo;ll need:</p>

<ul>
<li><a href="https://github.com/meteor/meteor">Meteor</a></li>
<li><a href="https://github.com/isaacs/npm">Npm</a></li>
<li><a href="https://github.com/visionmedia/mocha">Mocha</a></li>
</ul>


<p>Optional: <a href="http://growl.info/">Growl</a> (for notifications from mocha watch)</p>

<p>Getting everything running:</p>

<<<<<<< HEAD
<pre><code class="bash">meteor create mocha
cd mocha
meteor add coffeescript
</code></pre>

<p>Setting up Mocha to watch our coffee files and send Growl notifications:</p>

<pre><code class="bash">
mocha tests/*.coffee -w -G --compilers coffee:coffee-script
</code></pre>

<p>Now to create a sample test:</p>

<pre><code class="coffeescript test.coffee">describe "Array", -&gt;
  describe "#indexOf()", -&gt;
    it "should return -1 when the value is not present", -&gt;
      assert.equal -1, [1, 2, 3].indexOf(1)
      assert.equal -1, [1, 2, 3].indexOf(0)
</code></pre>

=======
<p><code>bash
meteor create mocha
cd mocha
meteor add coffeescript
</code></p>

<p>Setting up Mocha to watch our coffee files and send Growl notifications:</p>

<p>``` bash</p>

<p>mocha tests/*.coffee -w -G &mdash;compilers coffee:coffee-script</p>

<p>```</p>

<p>Now to create a sample test:</p>

<p>``` coffeescript test.coffee
describe &ldquo;Array&rdquo;, &ndash;>
  describe &ldquo;#indexOf()&rdquo;, &ndash;></p>

<pre><code>it "should return -1 when the value is not present", -&gt;
  assert.equal -1, [1, 2, 3].indexOf(1)
  assert.equal -1, [1, 2, 3].indexOf(0)
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Mocha should notice the file change and run the tests showing you the passing test.</p>

<p><a href="https://github.com/skalb/meteor-examples/tree/master/mocha">Source code here.</a></p>

<p>Some notes:
<<<<<<< HEAD
- The growl notification didn&rsquo;t work for me, but I assume that&rsquo;s because I&rsquo;m using an old version.
- When using Mocha watch, sometimes a failing test result would be outputted many times
- <a href="https://github.com/pivotal/jasmine">Jasmine</a> should also work fine</p>
=======
&ndash; The growl notification didn&rsquo;t work for me, but I assume that&rsquo;s because I&rsquo;m using an old version.
&ndash; When using Mocha watch, sometimes a failing test result would be outputted many times
&ndash; <a href="https://github.com/pivotal/jasmine">Jasmine</a> should also work fine</p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
]]></content>
  </entry>
  
  <entry>
<<<<<<< HEAD
    <title type="html"><![CDATA[Creating a Document Sharing Site With Meteor.js]]></title>
=======
    <title type="html"><![CDATA[Creating a document sharing site with Meteor.js]]></title>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
    <link href="http://www.skalb.com/2012/04/16/creating-a-document-sharing-site-with-meteor-js/"/>
    <updated>2012-04-16T00:00:00-07:00</updated>
    <id>http://www.skalb.com/2012/04/16/creating-a-document-sharing-site-with-meteor-js</id>
    <content type="html"><![CDATA[<p><strong>Background:</strong></p>

<p>“Meteor is a set of new technologies for building top-quality web apps in a fraction of the time, whether you&rsquo;re an expert developer or just getting started.”
<<<<<<< HEAD
- <a href="http://www.meteor.com">Meteor.com</a></p>
=======
&ndash; <a href="http://www.meteor.com">Meteor.com</a></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Goal:</strong></p>

<p>Create and deploy a real time document sharing website. The final product is at: <a href="http://docshare-tutorial.meteor.com">docshare-tutorial.meteor.com</a>.</p>

<!--more-->


<p><strong>Updated: Source code at <a href="https://github.com/skalb/docshare-tutorial">https://github.com/skalb/docshare-tutorial</a></strong></p>

<p><strong>Spec:</strong></p>

<ul>
<li>Single page app with two sections</li>
<li>Section 1

<ul>
<li>List of documents each with edit and delete buttons</li>
<li>Create new document button with name input</li>
</ul>
</li>
<li>Section 2

<ul>
<li>Text area of the document currently being edited</li>
</ul>
</li>
</ul>


<p><strong>Prerequisites:</strong></p>

<ul>
<li>Install Meteor</li>
</ul>


<<<<<<< HEAD
<pre><code class="bash">$ curl install.meteor.com | /bin/sh
</code></pre>
=======
<p><code>bash
$ curl install.meteor.com | /bin/sh
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Step 1: Getting things started</strong></p>

<p>Lets create the app:</p>

<<<<<<< HEAD
<pre><code class="bash">meteor create docshare-tutorial
</code></pre>

<p>Now, start the meteor server:</p>

<pre><code class="bash">cd docshare-tutorial
meteor
</code></pre>
=======
<p><code>bash
meteor create docshare-tutorial
</code></p>

<p>Now, start the meteor server:</p>

<p><code>bash
cd docshare-tutorial
meteor
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>You should see the default site at <a href="http://localhost:3000/">http://localhost:3000</a>:</p>

<p>Lastly, add the other packages we are going to use</p>

<<<<<<< HEAD
<pre><code class="bash">meteor add coffeescript
meteor add backbone
</code></pre>
=======
<p><code>bash
meteor add coffeescript
meteor add backbone
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p><strong>Step 2: Setting up the project</strong></p>

<p>Go ahead and delete <strong>docshare-tutorial.js</strong> and empty out the contents of <strong>docshare-tutorial.html</strong>.</p>

<p>Meteor lets you separate client and server code in 2 different ways:</p>

<ol>
<li>Using the Meteor.is_client and Meteor.is_server flags</li>
<li>Place client and server Javascript in the /client and /server folders, respectively. Any Javascript at the root level with run on both.</li>
</ol>


<p>I prefer method 2 since it feels a bit cleaner to me, but feel free to instead combine everything into one file. Create <strong>docshare-tutorial.coffee</strong>  at the root and <strong>client.coffee</strong>  in /client folder and <strong>server.coffee</strong> in the /server folder.</p>

<p><strong>Step 3: Server</strong></p>

<p>Collections in Meteor are schemaless. We want our documents collection to be available to both the server and the client so we’ll add it to the root level.</p>

<<<<<<< HEAD
<pre><code class="coffeescript docshare-tutorial.coffee"> @Documents = new Meteor.Collection("documents")
</code></pre>

<p>Our document object will have two fields: name and text. Let’s create a sample document on startup.</p>

<pre><code class="coffeescript server.coffee">Meteor.startup -&gt;
  if Documents.find().count() is 0
    Documents.insert
      name: "Sample doc"
      text: "Write here..."
</code></pre>

<p>Now, if you restart the meteor server, you’ll be able to access that document in the browser. Try this in the developer console:</p>

<pre><code class="javascript console">Documents.findOne()
</code></pre>
=======
<p>``` coffeescript docshare-tutorial.coffee
 @Documents = new Meteor.Collection(&ldquo;documents&rdquo;)</p>

<p>```</p>

<p>Our document object will have two fields: name and text. Let’s create a sample document on startup.</p>

<p>``` coffeescript server.coffee
Meteor.startup &ndash;>
  if Documents.find().count() is 0</p>

<pre><code>Documents.insert
  name: "Sample doc"
  text: "Write here..."
</code></pre>

<p>```</p>

<p>Now, if you restart the meteor server, you’ll be able to access that document in the browser. Try this in the developer console:</p>

<p><code>javascript console
Documents.findOne()
</code></p>
>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71

<p>You will see an object with the properties we just created. This is the only time you should need to restart the meteor server.</p>

<p><strong>Step 4: Client HTML</strong></p>

<p>Here’s we’ll define our head and body. The body will render two templates: documentList and documentView.</p>

<<<<<<< HEAD
<pre><code>&lt;head&gt;
  &lt;title&gt;docshare&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;hr&gt;
  
&lt;/body&gt;
</code></pre>

<p>Next, create the two templates needed to display the documents: documentList and document.</p>

<pre><code>&lt;template name="documentList"&gt;
  &lt;h1&gt;Welcome to document sharing!&lt;/h1&gt;
  &lt;div&gt;
    
      
    
  &lt;/div&gt;
  &lt;div id="createDocument"&gt;
    Name: &lt;input type="text" id="new-document-name" placeholder="New document" /&gt;&lt;input type="button" id="new-document" value="create"/&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre>

=======
<p>```
<head>
  <title>docshare</title>
</head>
<body>
  
  <hr>
  
</body></p>

<p>```</p>

<p>Next, create the two templates needed to display the documents: documentList and document.</p>

<p>```
<template name="documentList">
  <h1>Welcome to document sharing!</h1>
  <div></p>

<pre><code>
  

</code></pre>

<p>  </div>
  <div id="createDocument"></p>

<pre><code>Name: &lt;input type="text" id="new-document-name" placeholder="New document" /&gt;&lt;input type="button" id="new-document" value="create"/&gt;
</code></pre>

<p>  </div>
</template>
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Here we are using the built in Handlebars iterator #each to render the individual document objects. Finally, there’s a input field and create button to add a new document.</p>

<p>Now add the template to list the documents names each with an edit and delete button. We’ll also use a template method to determine which document is selected.</p>

<<<<<<< HEAD
<pre><code>&lt;template name="document"&gt;
  &lt;div class="document "&gt;
    &lt;p&gt;
    
    &lt;input type="button" id="edit-document" value="Edit"/&gt;
    &lt;input type="button" id="delete-document" value="Delete"/&gt;
    &lt;/p&gt;
   &lt;/div&gt;
&lt;/template&gt;
</code></pre>

<p>Lastly, let’s add the actual text field that the users can edit.</p>

<pre><code>&lt;template name="documentView"&gt;
  
  
    &lt;div&gt;
      &lt;p&gt;&lt;/p&gt;
        &lt;textarea id="document-text" rows="10" cols="80"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
   
   
&lt;/template&gt;
</code></pre>

=======
<p>```
<template name="document">
  <div class="document "></p>

<pre><code>&lt;p&gt;

&lt;input type="button" id="edit-document" value="Edit"/&gt;
&lt;input type="button" id="delete-document" value="Delete"/&gt;
&lt;/p&gt;
</code></pre>

<p>   </div>
</template>
```</p>

<p>Lastly, let’s add the actual text field that the users can edit.</p>

<p>```
<template name="documentView">
  
  </p>

<pre><code>&lt;div&gt;
  &lt;p&gt;&lt;/p&gt;
    &lt;textarea id="document-text" rows="10" cols="80"&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>

<p>   
   
</template>
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Note that this will only be rendered if a document is currently selected. Having both an #if and a #with seems redundant, but I didn’t see a better way. Based off the Handlebars documentation, I should only need the #if, but that doesn’t work.</p>

<p><strong>Step 5: Client Coffeescript</strong></p>

<p>First, we’ll setup a Backbone router to allow us to keep track of which document we’re viewing. This will allow us to support page refreshes and permalinking to documents.</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">DocumentsRouter = Backbone.Router.extend(
  routes:
    ":document_id": "main"

  main: (document_id) -&gt;
    Session.set "document_id", document_id

  setDocument: (document_id) -&gt;
    @navigate(document_id, true)
)

Router = new DocumentsRouter

Meteor.startup -&gt;
  Backbone.history.start pushState: true
</code></pre>

=======
<p>``` coffeescript client.coffee
DocumentsRouter = Backbone.Router.extend(
  routes:</p>

<pre><code>":document_id": "main"
</code></pre>

<p>  main: (document_id) &ndash;></p>

<pre><code>Session.set "document_id", document_id
</code></pre>

<p>  setDocument: (document_id) &ndash;></p>

<pre><code>@navigate(document_id, true)
</code></pre>

<p>)</p>

<p>Router = new DocumentsRouter</p>

<p>Meteor.startup &ndash;>
  Backbone.history.start pushState: true
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Basically this will store the document_id into the Meteor session whenever the user navigates to a URL or form /:document_id. If you’re not familar with Backbone, don’t worry about this, or read up at <a href="http://backbonejs.org/">http://backbonejs.org/</a></p>

<p>We are also using Meteor.startup again here but for a different purpose. On the client side it will run after DOM is loaded every time. I think it would be more clear if this method didn’t mean different things based on context.</p>

<p>Next, we need to define where the documentList template gets its data and handle the create new button</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.documentList.documents = -&gt;
  Documents.find({},
    sort:
      name: 1
  )

Template.documentList.events =
  'click #new-document': (e) -&gt;
    name = $('#new-document-name').val()
    if name
      Documents.insert(
        name: name
        text: ""
      )
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.documentList.documents = &ndash;>
  Documents.find({},</p>

<pre><code>sort:
  name: 1
</code></pre>

<p>  )</p>

<p>Template.documentList.events =
  &lsquo;click #new-document&rsquo;: (e) &ndash;></p>

<pre><code>name = $('#new-document-name').val()
if name
  Documents.insert(
    name: name
    text: ""
  )
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Notice that we’re sorting the documents by name. Each time a new document is added it will be correctly injected into the DOM. The entire list is not recreated. There is also a bit of validation to make sure the name exists.</p>

<p>Documents.insert (and all collection operations) are non-blocking when called client side. Meteor will go ahead and insert the data to the local client and can optionally call a callback with an object identifier or error message after the real operation finishes. This is invisible to the user, of course.</p>

<p>Next, define the selected property and event handlers for edit and delete:</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.document.events =
  'click #delete-document': (e) -&gt;
    Documents.remove(@_id)
  'click #edit-document': (e) -&gt;
    Router.setDocument(@_id)

Template.document.selected = -&gt;
  if Session.equals("document_id", @_id) then "selected" else ""
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.document.events =
  &lsquo;click #delete-document&rsquo;: (e) &ndash;></p>

<pre><code>Documents.remove(@_id)
</code></pre>

<p>  &lsquo;click #edit-document&rsquo;: (e) &ndash;></p>

<pre><code>Router.setDocument(@_id)
</code></pre>

<p>Template.document.selected = &ndash;>
  if Session.equals(&ldquo;document_id&rdquo;, @_id) then &ldquo;selected&rdquo; else &ldquo;&rdquo;
```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Note that in handlers for events the this object is the actual Document object.</p>

<p>Next, define the selectedDocument using the id stored in the session and update the text of that document when the user presses a key.</p>

<<<<<<< HEAD
<pre><code class="coffeescript client.coffee">Template.documentView.selectedDocument = -&gt;
  document_id = Session.get("document_id")
  Documents.findOne(
    _id: document_id
  )

Template.documentView.events =
  'keyup #document-text': (e) -&gt;
    # @_id should work here, but it doesn't
    sel = _id: Session.get("document_id")
    mod = $set: text: $('#document-text').val()
    Documents.update(sel, mod)
</code></pre>

=======
<p>``` coffeescript client.coffee
Template.documentView.selectedDocument = &ndash;>
  document_id = Session.get(&ldquo;document_id&rdquo;)
  Documents.findOne(</p>

<pre><code>_id: document_id
</code></pre>

<p>  )</p>

<p>Template.documentView.events =
  &lsquo;keyup #document-text&rsquo;: (e) &ndash;></p>

<pre><code># @_id should work here, but it doesn't
sel = _id: Session.get("document_id")
mod = $set: text: $('#document-text').val()
Documents.update(sel, mod)
</code></pre>

<p>```</p>

>>>>>>> e8a7200851be11b9841409b7bfa3f7f2d19c6c71
<p>Meteor acknowledges in their docs: “For now, the event handler gets the template data from the top level of the current template, not the template data from the template context of the element that triggered the event. This will be changing.” This is why we have to pull the id from the session.</p>

<p>Lastly, add the css style for the selected div:
<code>css docshare-tutorial.css
.selected {
  background-color: yellow;
}
</code></p>

<p><strong>Conclusion:</strong>
That’s it, done! 50 lines of HTML and 50 lines of Coffeescript for a very basic Google docs clone.</p>

<p>To test it out open two browsers and type!</p>
]]></content>
  </entry>
  
</feed>
